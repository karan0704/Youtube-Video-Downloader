// UI Controller for DOM manipulation
class UIController {
    constructor(app) {
        this.app = app;
    }

    displayVideoInfo(videoInfo) {
        const videoSection = document.getElementById('videoSection');
        if (!videoSection) {
            console.warn('Video section not found');
            return;
        }

        const thumbnailUrl = videoInfo.thumbnail || 'https://via.placeholder.com/200x112?text=No+Thumbnail';

        videoSection.innerHTML = `
            <div class="video-card fade-in">
                <img src="${thumbnailUrl}" alt="Thumbnail" class="video-thumbnail" 
                     onerror="this.src='https://via.placeholder.com/200x112?text=No+Thumbnail'">
                <div class="video-details">
                    <h3>${videoInfo.title || 'Video Title'}</h3>
                    <p><i class="fas fa-clock"></i> Duration: ${videoInfo.duration || 'Unknown'}</p>
                    <p><i class="fas fa-link"></i> URL: ${videoInfo.url || 'N/A'}</p>
                    <p><i class="fas fa-eye"></i> Available Qualities: ${videoInfo.availableQualities?.length || 0}</p>
                </div>
            </div>
        `;

        if (videoInfo.availableQualities) {
            this.displayQualityOptions(videoInfo.availableQualities);
        }

        // Show sections
        videoSection.classList.remove('hidden');
        const optionsSection = document.getElementById('optionsSection');
        if (optionsSection) {
            optionsSection.classList.remove('hidden');
        }

        // Scroll to video info
        videoSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    displayQualityOptions(qualities) {
        const qualityGrid = document.getElementById('qualityGrid');
        if (!qualityGrid) return;

        qualityGrid.innerHTML = '';

        const qualityInfo = {
            '1080p': { label: 'Full HD', icon: 'fas fa-video', desc: '1920×1080' },
            '720p': { label: 'HD', icon: 'fas fa-video', desc: '1280×720' },
            '480p': { label: 'SD', icon: 'fas fa-video', desc: '854×480' },
            '360p': { label: 'Low', icon: 'fas fa-video', desc: '640×360' },
            'best': { label: 'Best Quality', icon: 'fas fa-crown', desc: 'Highest Available' },
            'worst': { label: 'Smallest Size', icon: 'fas fa-compress', desc: 'Lowest Size' }
        };

        qualities.forEach(quality => {
            const info = qualityInfo[quality] || { label: 'Standard', icon: 'fas fa-video', desc: 'Quality' };

            const option = document.createElement('div');
            option.className = 'quality-option';
            option.dataset.quality = quality;

            option.innerHTML = `
                <i class="${info.icon}"></i>
                <h4>${quality}</h4>
                <p>${info.label}</p>
                <small>${info.desc}</small>
            `;

            qualityGrid.appendChild(option);
        });
    }

    displaySubtitles(subtitles) {
        const subtitleOptions = document.getElementById('subtitleOptions');
        if (!subtitleOptions) return;

        if (!subtitles || subtitles.length === 0) {
            subtitleOptions.innerHTML = `
                <div class="no-subtitles">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>No subtitles available for this video</p>
                </div>
            `;
            return;
        }

        subtitleOptions.innerHTML = '';

        subtitles.forEach(subtitle => {
            const option = document.createElement('div');
            option.className = 'subtitle-option';
            option.dataset.language = subtitle.languageCode;

            const autoGenText = subtitle.autoGenerated ? ' (Auto-generated)' : '';

            option.innerHTML = `
                <div class="subtitle-info">
                    <i class="fas fa-closed-captioning"></i>
                    <div>
                        <h4>${subtitle.language}${autoGenText}</h4>
                        <p>${subtitle.languageCode} • ${subtitle.format.toUpperCase()}</p>
                    </div>
                </div>
                <button class="btn-download-subtitle" onclick="downloadSubtitle('${subtitle.languageCode}', '${subtitle.format}')">
                    <i class="fas fa-download"></i>
                </button>
            `;

            subtitleOptions.appendChild(option);
        });
    }

    clearAll() {
        // Clear inputs
        const urlInput = document.getElementById('urlInput');
        if (urlInput) urlInput.value = '';

        // Hide sections
        const sections = ['videoSection', 'optionsSection', 'progressSection'];
        sections.forEach(sectionId => {
            const section = document.getElementById(sectionId);
            if (section) section.classList.add('hidden');
        });

        // Reset selections
        document.querySelectorAll('.quality-option.selected, .format-option.selected')
            .forEach(opt => opt.classList.remove('selected'));

        // Reset app state
        this.app.currentUrl = '';
        this.app.selectedQuality = '';
        this.app.selectedFormat = 'video';

        this.app.showNotification('Cleared all data', 'info');
    }

    openSettings() {
        const modal = document.getElementById('settingsModal');
        if (modal) {
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }
    }

    closeSettings() {
        const modal = document.getElementById('settingsModal');
        if (modal) {
            modal.classList.add('hidden');
            document.body.style.overflow = '';
        }
    }

    browsePath() {
        // In a real application, this would open a file dialog
        // For now, we'll use a simple prompt
        const currentPath = document.getElementById('downloadPath')?.value || 'Downloads/YTDownloader';
        const newPath = prompt('Enter download path:', currentPath);

        if (newPath && newPath.trim()) {
            const pathInput = document.getElementById('downloadPath');
            const currentPathDisplay = document.getElementById('currentPath');

            if (pathInput) pathInput.value = newPath.trim();
            if (currentPathDisplay) currentPathDisplay.textContent = newPath.trim();

            localStorage.setItem('downloadPath', newPath.trim());
            this.app.showNotification('Download path updated', 'success');
        }
    }

    updateStatus(status, type = 'info') {
        const statusText = document.getElementById('statusText');
        const statusDot = document.querySelector('.status-dot');

        if (statusText) statusText.textContent = status;
        if (statusDot) {
            statusDot.className = `status-dot ${type}`;
        }
    }

    showSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.classList.remove('hidden');
            section.classList.add('fade-in');
        }
    }

    hideSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.classList.add('hidden');
            section.classList.remove('fade-in');
        }
    }
}

// Global subtitle download function
window.downloadSubtitle = function(languageCode, format) {
    console.log(`Downloading subtitle: ${languageCode} in ${format} format`);
    window.app.showNotification(`Downloading ${languageCode} subtitles...`, 'info');

    // TODO: Implement actual subtitle download
    setTimeout(() => {
        window.app.showNotification(`${languageCode} subtitles downloaded!`, 'success');
    }, 2000);
};

// Initialize UI Controller
window.uiController = new UIController(window.app);
