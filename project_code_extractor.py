import os
import shutil

def extract_project_code():
    # Your project path
    project_path = r"D:\Karan Ticket Project\Youtube VIdeo Downloader"
    output_file = "youtube_downloader_complete_code.txt"

    print("üöÄ Starting Project Code Extraction...")
    print("=" * 60)

    # Files and folders to extract
    files_to_extract = [
        # Maven files
        "pom.xml",

        # Application properties
        "src/main/resources/application.properties",

        # Java source files
        "src/main/java/com/karan/youtubedownloader/YoutubeVIdeoDownloaderApplication.java",
        "src/main/java/com/karan/youtubedownloader/controller/YouTubeController.java",
        "src/main/java/com/karan/youtubedownloader/service/YouTubeService.java",
        "src/main/java/com/karan/youtubedownloader/model/VideoInfo.java",
        "src/main/java/com/karan/youtubedownloader/model/DownloadRequest.java",
        "src/main/java/com/karan/youtubedownloader/model/DownloadHistory.java",
        "src/main/java/com/karan/youtubedownloader/repository/DownloadHistoryRepository.java",

        # Frontend files
        "src/main/resources/static/index.html",
        "src/main/resources/static/style.css",
        "src/main/resources/static/script.js",

        # IntelliJ files
        ".idea/compiler.xml",
        ".idea/jarRepositories.xml",
        ".idea/misc.xml",
        ".idea/modules.xml",
        ".idea/vcs.xml",
        ".idea/workspace.xml",
        "youtube-video-downloader.iml"
    ]

    try:
        with open(output_file, 'w', encoding='utf-8') as output:
            # Write header
            output.write("=" * 80 + "\n")
            output.write("YouTube Video Downloader - Complete Project Code\n")
            output.write("Generated by: Karan's Project Code Extractor\n")
            output.write("Date: " + str(os.path.getctime(project_path)) + "\n")
            output.write("=" * 80 + "\n\n")

            # Extract each file
            for file_path in files_to_extract:
                full_path = os.path.join(project_path, file_path)

                if os.path.exists(full_path):
                    print(f"‚úÖ Extracting: {file_path}")

                    # Write file header
                    output.write("\n" + "=" * 80 + "\n")
                    output.write(f"FILE: {file_path}\n")
                    output.write("=" * 80 + "\n")

                    # Read and write file content
                    try:
                        with open(full_path, 'r', encoding='utf-8') as file:
                            content = file.read()
                            output.write(content)
                    except UnicodeDecodeError:
                        # Handle binary files or files with different encoding
                        try:
                            with open(full_path, 'r', encoding='latin-1') as file:
                                content = file.read()
                                output.write(content)
                        except Exception as e:
                            output.write(f"[ERROR: Could not read file - {e}]")

                    output.write("\n" + "=" * 80 + "\n")

                else:
                    print(f"‚ö†Ô∏è  File not found: {file_path}")
                    output.write(f"\n[FILE NOT FOUND: {file_path}]\n")

            # Add project structure
            output.write("\n" + "=" * 80 + "\n")
            output.write("PROJECT STRUCTURE\n")
            output.write("=" * 80 + "\n")

            for root, dirs, files in os.walk(project_path):
                # Skip target, .git, and other unnecessary folders
                dirs[:] = [d for d in dirs if d not in ['target', '.git', 'node_modules', '__pycache__']]

                level = root.replace(project_path, '').count(os.sep)
                indent = ' ' * 2 * level
                output.write(f"{indent}{os.path.basename(root)}/\n")

                subindent = ' ' * 2 * (level + 1)
                for file in files:
                    if not file.startswith('.') or file in ['.gitignore']:
                        output.write(f"{subindent}{file}\n")

        print("\n" + "=" * 60)
        print("‚úÖ PROJECT CODE EXTRACTION COMPLETE!")
        print(f"üìÑ Output file: {output_file}")
        print(f"üìä File size: {os.path.getsize(output_file)} bytes")
        print("üöÄ You can now upload this file!")

    except Exception as e:
        print(f"‚ùå Error during extraction: {e}")

def create_project_summary():
    """Creates a separate summary file with just the key information"""
    output_file = "project_summary.txt"

    summary_content = """
YOUTUBE VIDEO DOWNLOADER PROJECT SUMMARY
========================================

üéØ PROJECT OVERVIEW:
- Name: YouTube Video Downloader
- Technology: Spring Boot + MySQL + HTML/CSS/JS
- Features: Quality detection, Single video/playlist support
- Dependencies: Lombok, JPA, MySQL, Jackson

üìÅ KEY FILES:
1. YoutubeVIdeoDownloaderApplication.java - Main Spring Boot class
2. YouTubeController.java - REST API endpoints
3. YouTubeService.java - Business logic with yt-dlp integration
4. VideoInfo.java - Model for video information
5. DownloadRequest.java - Model for download requests
6. index.html - Frontend interface
7. script.js - Frontend JavaScript logic
8. pom.xml - Maven dependencies

üîß SETUP REQUIREMENTS:
1. Java 17+
2. MySQL database
3. yt-dlp installed (pip install yt-dlp)
4. Lombok plugin in IntelliJ
5. Enable annotation processing

üöÄ HOW TO RUN:
1. Import project in IntelliJ
2. Update MySQL credentials in application.properties
3. Run YoutubeVIdeoDownloaderApplication.java
4. Access at http://localhost:8080

üí° KEY FEATURES IMPLEMENTED:
- Smart quality detection (only shows available resolutions)
- Support for both single videos and playlists
- Professional responsive UI
- Database integration for download history
- Proper error handling and validation
- Clean code with Lombok annotations

üé® UI FEATURES:
- Modern gradient design
- Quality selection buttons
- Real-time status updates
- Mobile responsive
- Professional animations

This project demonstrates full-stack development skills with:
- Backend API development
- Database integration
- External tool integration (yt-dlp)
- Frontend development
- Modern Java practices with Lombok
"""

    try:
        with open(output_file, 'w', encoding='utf-8') as file:
            file.write(summary_content)
        print(f"üìã Project summary created: {output_file}")
    except Exception as e:
        print(f"‚ùå Error creating summary: {e}")

if __name__ == "__main__":
    # Extract all project code
    extract_project_code()

    # Create project summary
    create_project_summary()

    print("\nüéâ Both files are ready for upload!")
    print("üìÑ youtube_downloader_complete_code.txt - Complete code")
    print("üìã project_summary.txt - Project overview")