================================================================================
YouTube Video Downloader - Complete Project Code
Generated by: Karan's Project Code Extractor
Date: 1754579327.1333907
================================================================================


================================================================================
FILE: pom.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.14</version>
        <relativePath/>
    </parent>
    <groupId>com.karan</groupId>
    <artifactId>youtube-video-downloader</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Youtube Video Downloader</name>
    <description>YouTube Video Downloader with Quality Selection</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>


        <!-- Modern MySQL Driver -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>



        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>

        <!-- Jackson for JSON processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
================================================================================

================================================================================
FILE: src/main/resources/application.properties
================================================================================
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/youtube_downloader?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root@1234
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true

# File upload settings
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

# Server settings
server.port=8080

# Logging
logging.level.com.karan.youtubedownloader=DEBUG
logging.level.org.springframework.web=DEBUG
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/YoutubeVIdeoDownloaderApplication.java
================================================================================
package com.karan.youtubedownloader;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@Slf4j
@SpringBootApplication
public class YoutubeVIdeoDownloaderApplication {

    public static void main(String[] args) {
        log.info("üöÄ Starting YouTube Video Downloader Application...");
        SpringApplication.run(YoutubeVIdeoDownloaderApplication.class, args);
        log.info("‚úÖ YouTube Video Downloader Application started successfully!");
        log.info("üåê Access the app at: http://localhost:8080");
    }
}

================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/controller/YouTubeController.java
================================================================================
package com.karan.youtubedownloader.controller;

import com.karan.youtubedownloader.model.VideoInfo;
import com.karan.youtubedownloader.model.DownloadRequest;
import com.karan.youtubedownloader.service.YouTubeService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@RequestMapping("/api/youtube")
@RequiredArgsConstructor
public class YouTubeController {

    private final YouTubeService youTubeService;

    @PostMapping("/check-quality")
    public ResponseEntity<List<VideoInfo>> checkAvailableQualities(@RequestBody String url) {
        try {
            log.info("üìä Checking available qualities for URL: {}", url);
            List<VideoInfo> videoInfos = youTubeService.getAvailableQualities(url);
            log.info("‚úÖ Found {} videos with quality options", videoInfos.size());
            return ResponseEntity.ok(videoInfos);
        } catch (Exception e) {
            log.error("‚ùå Error checking qualities: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/download")
    public ResponseEntity<String> downloadVideo(@RequestBody DownloadRequest request) {
        try {
            log.info("‚¨áÔ∏è Starting download for URL: {} in quality: {}",
                    request.getUrl(), request.getQuality());

            // Get the download path from the frontend request
            String customPath = request.getDownloadPath(); // This will come from your frontend

            // Call service with all 3 parameters
            String result = youTubeService.downloadVideo(request.getUrl(), request.getQuality(), customPath);

            log.info("‚úÖ Download completed successfully");
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Download failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("Download failed: " + e.getMessage());
        }
    }

    @GetMapping("/download-history")
    public ResponseEntity<List<?>> getDownloadHistory() {
        try {
            // TODO: Implement download history retrieval
            return ResponseEntity.ok(List.of());
        } catch (Exception e) {
            log.error("‚ùå Error fetching download history: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/service/YouTubeService.java
================================================================================
package com.karan.youtubedownloader.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.karan.youtubedownloader.model.VideoInfo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Service
public class YouTubeService {

    private final ObjectMapper objectMapper = new ObjectMapper();

    public List<VideoInfo> getAvailableQualities(String url) throws Exception {
        log.info("üîç Fetching video information for: {}", url);

        ProcessBuilder processBuilder = new ProcessBuilder(
                "yt-dlp",
                "--dump-json",
                "--no-playlist",
                "--ignore-errors", // ‚úÖ Handle age-restricted videos gracefully
                "--no-warnings",   // ‚úÖ Reduce noise
                url
        );

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        List<VideoInfo> videoInfos = new ArrayList<>();
        StringBuilder errorOutput = new StringBuilder();
        String line;
        boolean foundAgeRestriction = false;

        // Read standard output
        while ((line = reader.readLine()) != null) {
            try {
                JsonNode videoData = objectMapper.readTree(line);
                VideoInfo videoInfo = parseVideoInfo(videoData);
                if (videoInfo != null) {
                    videoInfos.add(videoInfo);
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Could not parse video info line: {}", e.getMessage());
            }
        }

        // Read error output to detect age restrictions
        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
            errorOutput.append(line).append("\n");

            // Check for age restriction indicators
            if (line.toLowerCase().contains("age-restricted") ||
                    line.toLowerCase().contains("sign in") ||
                    line.toLowerCase().contains("inappropriate for some users")) {
                foundAgeRestriction = true;
            }
        }

        process.waitFor();

        // If no videos found but we detected age restriction, return special response
        if (videoInfos.isEmpty() && foundAgeRestriction) {
            VideoInfo restrictedVideo = VideoInfo.builder()
                    .title("üîû Age-Restricted Video - Authentication Required")
                    .url(url)
                    .duration("Unknown")
                    .thumbnail("https://via.placeholder.com/160x90?text=Age+Restricted")
                    .availableQualities(Arrays.asList("best", "720p", "480p", "360p", "worst"))
                    .build();
            videoInfos.add(restrictedVideo);
            log.warn("üîû Age-restricted video detected, providing default quality options");
        }

        return videoInfos;
    }

    public String downloadVideo(String url, String quality, String customPath) throws Exception {
        log.info("üì• Downloading video in {} quality", quality);

        // Handle download path
        String downloadsPath;
        if (customPath != null && !customPath.trim().isEmpty()) {
            downloadsPath = customPath.trim();
        } else {
            String userHome = System.getProperty("user.home");
            downloadsPath = userHome + File.separator + "Downloads" + File.separator + "YouTubeDownloader";
        }

        File downloadsDir = new File(downloadsPath);
        if (!downloadsDir.exists()) {
            downloadsDir.mkdirs();
        }

        boolean isPlaylist = url.contains("playlist?list=") || url.contains("&list=");
        String formatSelector = getQualityFormat(quality);

        ProcessBuilder processBuilder;

        if (quality.equals("playlist-all") && isPlaylist) {
            log.info("üìã Downloading entire playlist with authentication");
            processBuilder = new ProcessBuilder(
                    "yt-dlp",
                    "-f", formatSelector,
                    "-o", downloadsPath + File.separator + "%(playlist_title)s" + File.separator + "%(playlist_index)s - %(title)s.%(ext)s",
                    "--merge-output-format", "mp4",
                    "--ignore-errors",
                    "--no-abort-on-error",
                    "--continue",
                    "--cookies-from-browser", "chrome", // ‚úÖ Use Chrome cookies
                    url
            );
        } else if (isPlaylist) {
            log.info("üì∫ Downloading single video from playlist with authentication");
            processBuilder = new ProcessBuilder(
                    "yt-dlp",
                    "-f", formatSelector,
                    "-o", downloadsPath + File.separator + "%(title)s.%(ext)s",
                    "--merge-output-format", "mp4",
                    "--no-playlist",
                    "--ignore-errors",
                    "--continue",
                    "--cookies-from-browser", "chrome", // ‚úÖ Use Chrome cookies
                    url
            );
        } else {
            log.info("üì∫ Downloading single video with authentication");
            processBuilder = new ProcessBuilder(
                    "yt-dlp",
                    "-f", formatSelector,
                    "-o", downloadsPath + File.separator + "%(title)s.%(ext)s",
                    "--merge-output-format", "mp4",
                    "--ignore-errors",
                    "--continue",
                    "--cookies-from-browser", "chrome", // ‚úÖ Use Chrome cookies
                    url
            );
        }

        // Rest of your existing code...
        Process process = processBuilder.start();

        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        StringBuilder output = new StringBuilder();
        StringBuilder errorOutput = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            log.info("yt-dlp: {}", line);
            output.append(line).append("\n");
        }

        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
            errorOutput.append(line).append("\n");
        }

        int exitCode = process.waitFor();

        if (exitCode == 0) {
            return String.format("üéâ Video downloaded with authentication to %s!", downloadsPath);
        } else {
            String errorMessage = errorOutput.toString().trim();
            if (errorMessage.contains("cookies") || errorMessage.contains("authentication")) {
                throw new RuntimeException("Authentication failed. Please make sure you're logged into YouTube in your browser.");
            }
            throw new RuntimeException("Download failed: " + errorMessage);
        }
    }

    private String getQualityFormat(String quality) {
        switch (quality.toLowerCase()) {
            case "1080p":
                return "best[height<=1080][ext=mp4]/best[height<=1080]";
            case "720p":
                return "best[height<=720][ext=mp4]/best[height<=720]";
            case "480p":
                return "best[height<=480][ext=mp4]/best[height<=480]";
            case "360p":
                return "best[height<=360][ext=mp4]/best[height<=360]";
            case "best":
            case "playlist-all":
                return "best[ext=mp4]/best";
            case "worst":
                return "worst[ext=mp4]/worst";
            default:
                return "best[height<=720][ext=mp4]/best[height<=720]";
        }
    }

    // ‚úÖ Removed duplicate getFormatSelector method

    private VideoInfo parseVideoInfo(JsonNode videoData) {
        try {
            String title = getJsonValue(videoData, "title", "Unknown Title");
            String duration = formatDuration(getJsonIntValue(videoData, "duration", 0));
            String thumbnail = getJsonValue(videoData, "thumbnail", "");
            String url = getJsonValue(videoData, "webpage_url", "");

            List<String> availableQualities = extractQualities(videoData);

            return VideoInfo.builder()
                    .title(title)
                    .url(url)
                    .duration(duration)
                    .thumbnail(thumbnail)
                    .availableQualities(availableQualities)
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error parsing video info: {}", e.getMessage());
            return null;
        }
    }

    private List<String> extractQualities(JsonNode videoData) {
        List<String> standardQualities = Arrays.asList("1080p", "720p", "480p", "360p", "best");
        log.info("üéØ Providing standard quality options: {}", standardQualities);
        return standardQualities;
    }

    private String getJsonValue(JsonNode node, String fieldName, String defaultValue) {
        JsonNode field = node.get(fieldName);
        if (field != null && !field.isNull()) {
            return field.asText();
        }
        return defaultValue;
    }

    private int getJsonIntValue(JsonNode node, String fieldName, int defaultValue) {
        JsonNode field = node.get(fieldName);
        if (field != null && !field.isNull()) {
            return field.asInt();
        }
        return defaultValue;
    }

    private ProcessBuilder createDownloadProcess(String url, String quality, String downloadsPath, String browserType) {
        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("-f");
        command.add(getQualityFormat(quality));
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s.%(ext)s");
        command.add("--merge-output-format");
        command.add("mp4");
        command.add("--ignore-errors");
        command.add("--continue");

        // Add browser-specific authentication
        if (browserType != null && !browserType.isEmpty()) {
            command.add("--cookies-from-browser");
            command.add(browserType.toLowerCase()); // chrome, firefox, edge, safari
            log.info("üîê Using {} cookies for authentication", browserType);
        }

        command.add(url);

        return new ProcessBuilder(command);
    }

    private String formatDuration(int seconds) {
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;
        int secs = seconds % 60;

        if (hours > 0) {
            return String.format("%d:%02d:%02d", hours, minutes, secs);
        } else {
            return String.format("%d:%02d", minutes, secs);
        }
    }
}

================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/VideoInfo.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class VideoInfo {
    private String title;
    private String url;
    private String duration;
    private List<String> availableQualities;
    private String thumbnail;
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/DownloadRequest.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class DownloadRequest {
    private String url;
    private String quality;
    private String downloadPath;
    private String browserType;
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/DownloadHistory.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "download_history")
public class DownloadHistory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "video_url", nullable = false)
    private String videoUrl;

    @Column(name = "video_title")
    private String videoTitle;

    @Column(name = "quality", nullable = false)
    private String quality;

    @Column(name = "file_path")
    private String filePath;

    @Column(name = "download_date", nullable = false)
    private LocalDateTime downloadDate;

    @Column(name = "file_size")
    private Long fileSize;

    @PrePersist
    public void prePersist() {
        if (downloadDate == null) {
            downloadDate = LocalDateTime.now();
        }
    }
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/repository/DownloadHistoryRepository.java
================================================================================
package com.karan.youtubedownloader.repository;

import com.karan.youtubedownloader.model.DownloadHistory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface DownloadHistoryRepository extends JpaRepository<DownloadHistory, Long> {

    List<DownloadHistory> findByVideoTitleContainingIgnoreCase(String title);

    List<DownloadHistory> findByDownloadDateBetween(LocalDateTime startDate, LocalDateTime endDate);

    List<DownloadHistory> findTop10ByOrderByDownloadDateDesc();
}
================================================================================

================================================================================
FILE: src/main/resources/static/index.html
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Video Downloader | Karan's Project</title>
    <link rel="stylesheet" href="style.css">
    <!-- Modern Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
<div class="app-container">
    <!-- Header Section -->
    <header class="header">
        <div class="header-content">
            <div class="brand">
                <div class="brand-icon">
                    <i class="fas fa-play-circle"></i>
                </div>
                <div class="brand-text">
                    <h1>YouTube Downloader</h1>
                    <p>Professional Video Download Tool</p>
                </div>
            </div>
            <div class="header-stats">
                <div class="stat-item">
                    <i class="fas fa-download"></i>
                    <span id="downloadCount">0</span>
                    <small>Downloads</small>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <div class="container">

            <!-- URL Input Section -->
            <section class="input-section card">
                <div class="section-header">
                    <h2><i class="fas fa-link"></i> Enter YouTube URL</h2>
                    <p>Paste any YouTube video or playlist URL to get started</p>
                </div>

                <div class="url-input-group">
                    <div class="input-wrapper">
                        <i class="fas fa-paste input-icon"></i>
                        <textarea
                                id="urlInput"
                                placeholder="https://www.youtube.com/watch?v=example&#10;&#10;Supports both videos and playlists!"
                                rows="3"
                        ></textarea>
                    </div>
                    <button class="btn-primary" onclick="checkQualities()">
                        <i class="fas fa-search"></i>
                        <span>Analyze Video</span>
                    </button>
                </div>
            </section>

            <!-- Download Path Selection -->
            <section class="path-section card" id="pathSection">
                <div class="section-header">
                    <h3><i class="fas fa-folder"></i> Download Location</h3>
                </div>
                <div class="path-options">
                    <div class="path-option active" data-path="default">
                        <i class="fas fa-download"></i>
                        <div class="path-info">
                            <strong>Default Downloads</strong>
                            <small id="defaultPath">C:\Users\YourName\Downloads\YouTubeDownloader</small>
                        </div>
                        <input type="radio" name="downloadPath" value="default" checked>
                    </div>
                    <div class="path-option" data-path="custom">
                        <i class="fas fa-folder-open"></i>
                        <div class="path-info">
                            <strong>Choose Custom Folder</strong>
                            <small>Select where to save your videos</small>
                        </div>
                        <input type="radio" name="downloadPath" value="custom">
                    </div>
                </div>
                <div class="custom-path-input hidden" id="customPathInput">
                    <input type="text" id="customPath" placeholder="C:\Your\Custom\Folder">
                    <button class="btn-secondary" onclick="browseFolder()">
                        <i class="fas fa-search"></i> Browse
                    </button>
                </div>
            </section>
            <!-- Add this section after path selection -->
            <section class="auth-section card" id="authSection">
                <div class="section-header">
                    <h3><i class="fas fa-shield-alt"></i> Authentication for Age-Restricted Videos</h3>
                    <p>Select your browser to use existing YouTube login</p>
                </div>
                <div class="browser-options">
                    <div class="browser-option active" data-browser="chrome">
                        <i class="fab fa-chrome"></i>
                        <div class="browser-info">
                            <strong>Google Chrome</strong>
                            <small>Use Chrome's YouTube cookies</small>
                        </div>
                        <input type="radio" name="browserType" value="chrome" checked>
                    </div>
                    <div class="browser-option" data-browser="firefox">
                        <i class="fab fa-firefox"></i>
                        <div class="browser-info">
                            <strong>Mozilla Firefox</strong>
                            <small>Use Firefox's YouTube cookies</small>
                        </div>
                        <input type="radio" name="browserType" value="firefox">
                    </div>
                    <div class="browser-option" data-browser="edge">
                        <i class="fab fa-edge"></i>
                        <div class="browser-info">
                            <strong>Microsoft Edge</strong>
                            <small>Use Edge's YouTube cookies</small>
                        </div>
                        <input type="radio" name="browserType" value="edge">
                    </div>
                </div>
                <div class="auth-notice">
                    <i class="fas fa-info-circle"></i>
                    <strong>How it works:</strong> The app will use your existing YouTube login from the selected
                    browser to download age-restricted videos.
                </div>
            </section>

            <!-- Loading State -->
            <div id="loadingSection" class="loading-section hidden">
                <div class="loading-content">
                    <div class="spinner"></div>
                    <h3>Analyzing Video...</h3>
                    <p>Getting available quality options</p>
                </div>
            </div>

            <!-- Video Information -->
            <section id="videoSection" class="video-section card hidden">
                <div class="section-header">
                    <h3><i class="fas fa-video"></i> Video Information</h3>
                </div>
                <div id="videoInfo" class="video-info">
                    <!-- Video details will be inserted here -->
                </div>
            </section>

            <!-- Quality Selection -->
            <section id="qualitySection" class="quality-section card hidden">
                <div class="section-header">
                    <h3><i class="fas fa-cog"></i> Select Quality</h3>
                    <p>Choose your preferred video quality</p>
                </div>
                <div id="qualityGrid" class="quality-grid">
                    <!-- Quality options will be inserted here -->
                </div>
                <div class="download-actions">
                    <button id="downloadBtn" class="btn-download" onclick="downloadVideo()" disabled>
                        <i class="fas fa-cloud-download-alt"></i>
                        <span>Download Video</span>
                        <div class="btn-shine"></div>
                    </button>
                </div>
            </section>

            <!-- Download Progress -->
            <section id="progressSection" class="progress-section card hidden">
                <div class="section-header">
                    <h3><i class="fas fa-tasks"></i> Download Progress</h3>
                </div>
                <div class="progress-content">
                    <div class="progress-circle">
                        <svg viewBox="0 0 36 36" class="circular-chart">
                            <path class="circle-bg"
                                  d="M18 2.0845
                                        a 15.9155 15.9155 0 0 1 0 31.831
                                        a 15.9155 15.9155 0 0 1 0 -31.831"
                            />
                            <path id="progressCircle" class="circle"
                                  d="M18 2.0845
                                        a 15.9155 15.9155 0 0 1 0 31.831
                                        a 15.9155 15.9155 0 0 1 0 -31.831"
                            />
                            <text id="progressPercent" x="18" y="20.35" class="percentage">0%</text>
                        </svg>
                    </div>
                    <div class="progress-details">
                        <h4 id="progressTitle">Preparing Download...</h4>
                        <p id="progressStatus">Initializing download process</p>
                        <div class="progress-bar">
                            <div id="progressFill" class="progress-fill"></div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Status Messages -->
            <div id="statusContainer" class="status-container">
                <!-- Status messages will appear here -->
            </div>

        </div>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <div class="footer-info">
                <p>Built with ‚ù§Ô∏è by <strong>Karan</strong></p>
                <p>Spring Boot + yt-dlp Integration</p>
            </div>
            <div class="footer-links">
                <a href="#" class="footer-link">
                    <i class="fab fa-github"></i> Source Code
                </a>
            </div>
        </div>
    </footer>

    <!-- Success Modal -->
    <div id="successModal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-icon success">
                <i class="fas fa-check-circle"></i>
            </div>
            <h3>Download Complete!</h3>
            <p id="downloadSuccessMessage"></p>
            <button class="btn-primary" onclick="closeModal()">
                <i class="fas fa-thumbs-up"></i> Awesome!
            </button>
        </div>
    </div>

</div>

<script src="script.js"></script>
</body>
</html>
================================================================================

================================================================================
FILE: src/main/resources/static/style.css
================================================================================
/* Modern CSS Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* CSS Variables for Consistent Design */
:root {
    --primary-color: #3b82f6;
    --primary-dark: #2563eb;
    --secondary-color: #64748b;
    --success-color: #10b981;
    --warning-color: #f59e0b;
    --error-color: #ef4444;
    --bg-color: #f8fafc;
    --card-bg: #ffffff;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --border-color: #e2e8f0;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
    --border-radius: 12px;
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --font-family: 'Inter', system-ui, -apple-system, sans-serif;
}

/* Base Styles */
body {
    font-family: var(--font-family);
    background-color: var(--bg-color);
    color: var(--text-primary);
    line-height: 1.6;
    font-weight: 400;
    overflow-x: hidden;
}

.app-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Header */
.header {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
    color: white;
    padding: 2rem 0;
    position: relative;
    overflow: hidden;
}

.header::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><polygon fill="rgba(255,255,255,0.05)" points="0,0 1000,300 1000,1000 0,1000"/></svg>');
    background-size: cover;
}

.header-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
}

.brand {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.brand-icon {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.8rem;
    backdrop-filter: blur(10px);
}

.brand-text h1 {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
}

.brand-text p {
    opacity: 0.9;
    font-weight: 400;
}

.header-stats {
    display: flex;
    gap: 2rem;
}

.stat-item {
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    padding: 1rem 1.5rem;
    border-radius: 12px;
    backdrop-filter: blur(10px);
}

.stat-item i {
    display: block;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.stat-item span {
    display: block;
    font-size: 1.5rem;
    font-weight: 600;
}

.stat-item small {
    opacity: 0.8;
    font-size: 0.875rem;
}

/* Main Content */
.main-content {
    flex: 1;
    padding: 3rem 0;
}

.container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 2rem;
}

/* Card Component */
.card {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: var(--shadow-sm);
    transition: var(--transition);
}

.card:hover {
    box-shadow: var(--shadow-md);
    transform: translateY(-2px);
}

/* Section Headers */
.section-header {
    margin-bottom: 1.5rem;
}

.section-header h2,
.section-header h3 {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
}

.section-header h2 {
    font-size: 1.5rem;
}

.section-header h3 {
    font-size: 1.25rem;
}

.section-header p {
    color: var(--text-secondary);
    font-size: 0.95rem;
}

.section-header i {
    color: var(--primary-color);
}

/* URL Input Section */
.url-input-group {
    display: flex;
    gap: 1rem;
    align-items: flex-start;
}

.input-wrapper {
    flex: 1;
    position: relative;
}

.input-icon {
    position: absolute;
    left: 1rem;
    top: 1rem;
    color: var(--text-secondary);
    z-index: 2;
}

#urlInput {
    width: 100%;
    min-height: 120px;
    padding: 1rem 1rem 1rem 3rem;
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
    font-family: var(--font-family);
    font-size: 0.95rem;
    line-height: 1.5;
    resize: vertical;
    transition: var(--transition);
    background: #fafbfc;
}

#urlInput:focus {
    outline: none;
    border-color: var(--primary-color);
    background: white;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

#urlInput::placeholder {
    color: var(--text-secondary);
    opacity: 0.7;
}

/* Buttons */
.btn-primary,
.btn-secondary,
.btn-download {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    border: none;
    border-radius: var(--border-radius);
    font-family: var(--font-family);
    font-size: 0.95rem;
    font-weight: 500;
    text-decoration: none;
    transition: var(--transition);
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.btn-primary {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
    color: white;
    min-width: 160px;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
}

.btn-secondary {
    background: var(--border-color);
    color: var(--text-primary);
}

.btn-secondary:hover {
    background: var(--text-secondary);
    color: white;
}

.btn-download {
    background: linear-gradient(135deg, var(--success-color) 0%, #059669 100%);
    color: white;
    font-size: 1.1rem;
    padding: 1.25rem 2rem;
    width: 100%;
    justify-content: center;
}

.btn-download:disabled {
    background: var(--border-color);
    color: var(--text-secondary);
    cursor: not-allowed;
    transform: none;
}

.btn-download:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 12px 35px rgba(16, 185, 129, 0.4);
}

.btn-shine {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.8s;
}

.btn-download:hover .btn-shine {
    left: 100%;
}

/* Path Selection */
.path-options {
    display: grid;
    gap: 1rem;
    margin-bottom: 1rem;
}

.path-option {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: var(--transition);
    position: relative;
}

.path-option:hover {
    border-color: var(--primary-color);
    background: rgba(59, 130, 246, 0.02);
}

.path-option.active {
    border-color: var(--primary-color);
    background: rgba(59, 130, 246, 0.05);
}

.path-option i {
    font-size: 1.25rem;
    color: var(--primary-color);
    min-width: 20px;
}

.path-info {
    flex: 1;
}

.path-info strong {
    display: block;
    margin-bottom: 0.25rem;
    color: var(--text-primary);
}

.path-info small {
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.path-option input {
    margin-left: auto;
}

.custom-path-input {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    background: #f8fafc;
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
}

.custom-path-input input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-family: var(--font-family);
}

/* Video Information */
.video-info {
    display: grid;
    gap: 1.5rem;
}

.video-card {
    display: flex;
    gap: 1.5rem;
    padding: 1.5rem;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
}

.video-thumbnail {
    width: 160px;
    height: 90px;
    border-radius: 8px;
    object-fit: cover;
    background: var(--border-color);
}

.video-details {
    flex: 1;
}

.video-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.75rem;
    line-height: 1.4;
}

.video-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.video-meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Quality Grid */
.quality-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.quality-option {
    padding: 1.25rem;
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
    text-align: center;
    cursor: pointer;
    transition: var(--transition);
    background: white;
    position: relative;
}

.quality-option:hover {
    border-color: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.quality-option.selected {
    border-color: var(--primary-color);
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
}

.quality-option i {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    display: block;
}

.quality-option .quality-label {
    font-weight: 600;
    font-size: 1rem;
}

.quality-option .quality-description {
    font-size: 0.875rem;
    opacity: 0.8;
    margin-top: 0.25rem;
}

/* Loading Section */
.loading-section {
    text-align: center;
    padding: 3rem;
}

.loading-content h3 {
    margin: 1rem 0 0.5rem;
    color: var(--text-primary);
}

.loading-content p {
    color: var(--text-secondary);
}

.spinner {
    width: 50px;
    height: 50px;
    border: 4px solid var(--border-color);
    border-top: 4px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

/* Progress Section */
.progress-content {
    display: flex;
    gap: 2rem;
    align-items: center;
}

.progress-circle {
    width: 120px;
    height: 120px;
}

.circular-chart {
    display: block;
    margin: 10px auto;
    max-width: 80%;
    max-height: 250px;
}

.circle-bg {
    fill: none;
    stroke: var(--border-color);
    stroke-width: 3.8;
}

.circle {
    fill: none;
    stroke: var(--primary-color);
    stroke-width: 2.8;
    stroke-linecap: round;
    animation: progress 1s ease-in-out forwards;
    stroke-dasharray: 0 100;
}

.percentage {
    fill: var(--text-primary);
    font-family: var(--font-family);
    font-size: 0.5em;
    text-anchor: middle;
    font-weight: 600;
}

.progress-details {
    flex: 1;
}

.progress-details h4 {
    color: var(--text-primary);
    margin-bottom: 0.5rem;
}

.progress-details p {
    color: var(--text-secondary);
    margin-bottom: 1rem;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: var(--border-color);
    border-radius: 4px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--primary-dark));
    width: 0%;
    transition: width 0.3s ease;
    border-radius: 4px;
}

/* Status Container */
.status-container {
    position: fixed;
    top: 2rem;
    right: 2rem;
    z-index: 1000;
    pointer-events: none;
}

.status-message {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 1.5rem;
    margin-bottom: 0.5rem;
    border-radius: var(--border-radius);
    font-weight: 500;
    box-shadow: var(--shadow-lg);
    backdrop-filter: blur(10px);
    transform: translateX(400px);
    transition: var(--transition);
    pointer-events: auto;
}

.status-message.show {
    transform: translateX(0);
}

.status-message.info {
    background: rgba(59, 130, 246, 0.95);
    color: white;
    border: 1px solid rgba(59, 130, 246, 0.3);
}

.status-message.success {
    background: rgba(16, 185, 129, 0.95);
    color: white;
    border: 1px solid rgba(16, 185, 129, 0.3);
}

.status-message.error {
    background: rgba(239, 68, 68, 0.95);
    color: white;
    border: 1px solid rgba(239, 68, 68, 0.3);
}

/* Modal */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    backdrop-filter: blur(4px);
}

.modal-content {
    background: white;
    padding: 3rem;
    border-radius: 20px;
    text-align: center;
    max-width: 400px;
    width: 90%;
    box-shadow: var(--shadow-lg);
    transform: scale(0.9);
    transition: var(--transition);
}

.modal:not(.hidden) .modal-content {
    transform: scale(1);
}

.modal-icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
    font-size: 2rem;
}

.modal-icon.success {
    background: rgba(16, 185, 129, 0.1);
    color: var(--success-color);
}

.modal-content h3 {
    margin-bottom: 1rem;
    color: var(--text-primary);
}

.modal-content p {
    margin-bottom: 2rem;
    color: var(--text-secondary);
    line-height: 1.6;
}

/* Footer */
.footer {
    background: var(--card-bg);
    border-top: 1px solid var(--border-color);
    padding: 2rem 0;
    margin-top: auto;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.footer-info p {
    color: var(--text-secondary);
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
}

.footer-links {
    display: flex;
    gap: 1.5rem;
}

.footer-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    transition: var(--transition);
}

.footer-link:hover {
    color: var(--primary-color);
}

/* Utility Classes */
.hidden {
    display: none !important;
}

.text-center {
    text-align: center;
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        padding: 0 1rem;
    }

    .header-content {
        flex-direction: column;
        gap: 2rem;
        text-align: center;
        padding: 0 1rem;
    }

    .brand {
        flex-direction: column;
        text-align: center;
    }

    .url-input-group {
        flex-direction: column;
    }

    .btn-primary {
        width: 100%;
        justify-content: center;
    }

    .quality-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .progress-content {
        flex-direction: column;
        text-align: center;
    }

    .footer-content {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .status-container {
        left: 1rem;
        right: 1rem;
        top: 1rem;
    }

    .modal-content {
        margin: 1rem;
    }
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.card {
    animation: fadeInUp 0.6s ease forwards;
}

/* Smooth Scrolling */
html {
    scroll-behavior: smooth;
}

.playlist-notice {
    margin-top: 1rem;
    padding: 0.75rem;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    color: white;
    border-radius: 8px;
    font-size: 0.9rem;
}

.age-restricted {
    border-left: 5px solid #f59e0b !important;
    background: linear-gradient(135deg, #fef3c7, #fde68a) !important;
}

.age-warning {
    margin: 1rem 0;
    padding: 1rem;
    background: linear-gradient(135deg, #f59e0b, #d97706);
    color: white;
    border-radius: 8px;
    font-size: 0.9rem;
    text-align: center;
}

.browser-options {
    display: grid;
    gap: 1rem;
    margin-bottom: 1rem;
}

.browser-option {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: var(--transition);
}

.browser-option:hover {
    border-color: var(--primary-color);
    background: rgba(59, 130, 246, 0.02);
}

.browser-option.active {
    border-color: var(--primary-color);
    background: rgba(59, 130, 246, 0.05);
}

.browser-option i {
    font-size: 1.5rem;
    min-width: 24px;
}

.browser-option i.fa-chrome {
    color: #4285f4;
}

.browser-option i.fa-firefox {
    color: #ff9500;
}

.browser-option i.fa-edge {
    color: #0078d4;
}

.browser-info strong {
    display: block;
    margin-bottom: 0.25rem;
    color: var(--text-primary);
}

.browser-info small {
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.auth-notice {
    display: flex;
    gap: 0.75rem;
    padding: 1rem;
    background: #f0f9ff;
    border: 1px solid #bae6fd;
    border-radius: var(--border-radius);
    font-size: 0.9rem;
    color: #0369a1;
}

.auth-notice i {
    color: #0284c7;
    margin-top: 0.1rem;
}


================================================================================

================================================================================
FILE: src/main/resources/static/script.js
================================================================================
// Global variables
let currentUrl = '';
let selectedQuality = '';
let selectedPath = 'default';
let downloadInProgress = false;
let downloadCount = 0;

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    // Set default download path
    updateDefaultPath();

    // Add event listeners for path selection
    setupPathSelection();

    // Focus on URL input
    document.getElementById('urlInput').focus();

    // Add keyboard shortcuts
    setupKeyboardShortcuts();
}

function updateDefaultPath() {
    const defaultPathElement = document.getElementById('defaultPath');
    const userHome = 'C:\\Users\\' + (localStorage.getItem('username') || 'YourName');
    const defaultPath = userHome + '\\Downloads\\YouTubeDownloader';
    defaultPathElement.textContent = defaultPath;
}

function setupPathSelection() {
    const pathOptions = document.querySelectorAll('.path-option');
    const customPathInput = document.getElementById('customPathInput');

    pathOptions.forEach(option => {
        option.addEventListener('click', function() {
            // Remove active class from all options
            pathOptions.forEach(opt => opt.classList.remove('active'));

            // Add active class to clicked option
            this.classList.add('active');

            // Update selected path
            selectedPath = this.dataset.path;

            // Show/hide custom path input
            if (selectedPath === 'custom') {
                customPathInput.classList.remove('hidden');
            } else {
                customPathInput.classList.add('hidden');
            }

            // Update radio button
            this.querySelector('input[type="radio"]').checked = true;
        });
    });
}

function setupKeyboardShortcuts() {
    document.addEventListener('keydown', function(e) {
        // Enter to analyze video
        if (e.key === 'Enter' && e.ctrlKey && !downloadInProgress) {
            checkQualities();
        }

        // Escape to close modal
        if (e.key === 'Escape') {
            closeModal();
        }
    });

    // URL input enter key
    document.getElementById('urlInput').addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            if (!downloadInProgress) {
                checkQualities();
            }
        }
    });
}

async function checkQualities() {
    const url = document.getElementById('urlInput').value.trim();

    if (!url) {
        showStatus('‚ö†Ô∏è Please enter a YouTube URL', 'error');
        return;
    }

    if (!isValidYouTubeUrl(url)) {
        showStatus('‚ùå Please enter a valid YouTube URL', 'error');
        return;
    }

    currentUrl = url;
    showLoading(true);
    hideElements(['videoSection', 'qualitySection', 'progressSection']);

    try {
        showStatus('üîç Analyzing video...', 'info');

        const response = await fetch('/api/youtube/check-quality', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(url)
        });

        showLoading(false);

        if (response.ok) {
            const videoInfos = await response.json();
            if (videoInfos && videoInfos.length > 0) {
                displayVideoInformation(videoInfos);
                showStatus('‚úÖ Video analysis complete', 'success');
            } else {
                showStatus('‚ùå No video information found', 'error');
            }
        } else {
            showStatus('‚ùå Error analyzing video. Please check your URL.', 'error');
        }
    } catch (error) {
        showLoading(false);
        showStatus(`‚ùå Network error: ${error.message}`, 'error');
        console.error('Error:', error);
    }
}

function displayVideoInformation(videoInfos) {
    const videoInfo = videoInfos[0];

    // Check if it's an age-restricted video
    const isAgeRestricted = videoInfo.title.includes("Age-Restricted");

    // Update video information section
    const videoInfoElement = document.getElementById('videoInfo');
    videoInfoElement.innerHTML = `
        <div class="video-card ${isAgeRestricted ? 'age-restricted' : ''}">
            <img src="${videoInfo.thumbnail || 'https://via.placeholder.com/160x90?text=Age+Restricted'}" 
                 alt="Video thumbnail" class="video-thumbnail">
            <div class="video-details">
                <h4 class="video-title">${escapeHtml(videoInfo.title)}</h4>
                ${isAgeRestricted ?
        '<div class="age-warning">üîû <strong>This video is age-restricted.</strong> Download may require YouTube cookies for authentication.</div>' :
        ''
    }
                <div class="video-meta">
                    <div class="video-meta-item">
                        <i class="fas fa-clock"></i>
                        <span>${videoInfo.duration}</span>
                    </div>
                    <div class="video-meta-item">
                        <i class="fas fa-link"></i>
                        <a href="${videoInfo.url}" target="_blank" rel="noopener">View on YouTube</a>
                    </div>
                    ${isAgeRestricted ?
        '<div class="video-meta-item"><i class="fas fa-exclamation-triangle"></i><span>Age verification may be required</span></div>' :
        '<div class="video-meta-item"><i class="fas fa-list"></i><span>' + (videoInfo.availableQualities ? videoInfo.availableQualities.length : 0) + ' quality options</span></div>'
    }
                </div>
            </div>
        </div>
    `;

    // Display quality options
    displayQualityOptions(videoInfo.availableQualities);

    // Show sections
    showElements(['videoSection', 'qualitySection']);

    // Show appropriate status message
    if (isAgeRestricted) {
        showStatus('üîû Age-restricted video detected. Download may require additional authentication.', 'info');
    } else {
        showStatus('‚úÖ Video analysis complete', 'success');
    }
}

function displayQualityOptions(qualities) {
    const qualityGrid = document.getElementById('qualityGrid');
    qualityGrid.innerHTML = '';

    const qualityDescriptions = {
        '1080p': 'Full HD',
        '720p': 'HD Ready',
        '480p': 'Standard',
        '360p': 'Low Quality',
        'best': 'Best Available',
        'worst': 'Smallest Size'
    };

    const qualityIcons = {
        '1080p': 'fas fa-star',
        '720p': 'fas fa-hd-video',
        '480p': 'fas fa-video',
        '360p': 'fas fa-mobile-alt',
        'best': 'fas fa-crown',
        'worst': 'fas fa-compress'
    };

    qualities.forEach(quality => {
        const qualityOption = document.createElement('div');
        qualityOption.className = 'quality-option';
        qualityOption.onclick = () => selectQuality(quality, qualityOption);

        qualityOption.innerHTML = `
            <i class="${qualityIcons[quality] || 'fas fa-video'}"></i>
            <div class="quality-label">${quality}</div>
            <div class="quality-description">${qualityDescriptions[quality] || 'Video Quality'}</div>
        `;

        qualityGrid.appendChild(qualityOption);
    });

    // Reset selection
    selectedQuality = '';
    updateDownloadButton();
}

function selectQuality(quality, element) {
    selectedQuality = quality;

    // Update UI
    document.querySelectorAll('.quality-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    element.classList.add('selected');

    updateDownloadButton();
    showStatus(`üì∫ Selected quality: ${quality}`, 'info');
}

function updateDownloadButton() {
    const downloadBtn = document.getElementById('downloadBtn');
    downloadBtn.disabled = !selectedQuality || downloadInProgress;

    if (selectedQuality && !downloadInProgress) {
        downloadBtn.innerHTML = `
            <i class="fas fa-cloud-download-alt"></i>
            <span>Download Video</span>
            <div class="btn-shine"></div>
        `;
    } else if (downloadInProgress) {
        downloadBtn.innerHTML = `
            <i class="fas fa-spinner fa-spin"></i>
            <span>Downloading...</span>
        `;
    } else {
        downloadBtn.innerHTML = `
            <i class="fas fa-hand-pointer"></i>
            <span>Select Quality First</span>
        `;
    }
}

async function downloadVideo() {
    if (!selectedQuality) {
        showStatus('‚ö†Ô∏è Please select a quality first', 'error');
        return;
    }

    if (!currentUrl) {
        showStatus('‚ö†Ô∏è No video URL found', 'error');
        return;
    }

    if (downloadInProgress) {
        return;
    }

    // Get download path
    let downloadPath = getSelectedPath();
    if (!downloadPath) {
        showStatus('‚ö†Ô∏è Please select a download location', 'error');
        return;
    }

    downloadInProgress = true;
    updateDownloadButton();
    showDownloadProgress(true);

    try {
        const requestBody = {
            url: currentUrl,
            quality: selectedQuality,
            downloadPath: downloadPath  // Send path to backend
        };

        showStatus('‚¨áÔ∏è Starting download...', 'info');

        const response = await fetch('/api/youtube/download', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (response.ok) {
            const result = await response.text();

            // Update download count
            downloadCount++;
            updateDownloadCount();

            showSuccessModal(result, downloadPath);
            showStatus('‚úÖ Download completed successfully!', 'success');

            // Auto-hide progress after success
            setTimeout(() => {
                showDownloadProgress(false);
            }, 2000);

        } else {
            const errorText = await response.text();
            showStatus(`‚ùå Download failed: ${errorText}`, 'error');
            showDownloadProgress(false);
        }
    } catch (error) {
        showStatus(`‚ùå Download error: ${error.message}`, 'error');
        console.error('Download error:', error);
        showDownloadProgress(false);
    } finally {
        downloadInProgress = false;
        updateDownloadButton();
    }
}

function getSelectedPath() {
    if (selectedPath === 'default') {
        const userHome = 'C:\\Users\\' + (localStorage.getItem('username') || 'YourName');
        return userHome + '\\Downloads\\YouTubeDownloader';
    } else if (selectedPath === 'custom') {
        const customPath = document.getElementById('customPath').value.trim();
        if (!customPath) {
            return null;
        }
        return customPath;
    }
    return null;
}

function browseFolder() {
    // In a real web app, you'd need a file picker API or electron integration
    // For now, show instruction to user
    showStatus('üí° Enter your folder path manually in the text field', 'info');
    document.getElementById('customPath').focus();
}

function showLoading(show) {
    const loadingSection = document.getElementById('loadingSection');
    if (show) {
        loadingSection.classList.remove('hidden');
    } else {
        loadingSection.classList.add('hidden');
    }
}

function showDownloadProgress(show) {
    const progressSection = document.getElementById('progressSection');
    if (show) {
        progressSection.classList.remove('hidden');
        updateProgress(0, 'Preparing download...', 'Initializing download process');
        simulateProgress();
    } else {
        progressSection.classList.add('hidden');
    }
}

function updateProgress(percentage, title, status) {
    // Update circular progress
    const progressCircle = document.getElementById('progressCircle');
    const progressPercent = document.getElementById('progressPercent');
    const circumference = 2 * Math.PI * 15.9155;
    const offset = circumference - (percentage / 100) * circumference;

    progressCircle.style.strokeDasharray = `${circumference} ${circumference}`;
    progressCircle.style.strokeDashoffset = offset;
    progressPercent.textContent = Math.round(percentage) + '%';

    // Update linear progress
    document.getElementById('progressFill').style.width = percentage + '%';

    // Update text
    document.getElementById('progressTitle').textContent = title;
    document.getElementById('progressStatus').textContent = status;
}

function simulateProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 95) progress = 95;

        let title, status;
        if (progress < 20) {
            title = 'Connecting to server...';
            status = 'Establishing connection with YouTube servers';
        } else if (progress < 40) {
            title = 'Processing video...';
            status = 'Analyzing video format and quality options';
        } else if (progress < 80) {
            title = 'Downloading video...';
            status = 'Downloading video content in selected quality';
        } else {
            title = 'Finalizing download...';
            status = 'Processing and saving video file';
        }

        updateProgress(progress, title, status);

        if (!downloadInProgress) {
            clearInterval(interval);
            if (downloadInProgress === false && progress < 100) {
                // Download completed successfully
                updateProgress(100, 'Download Complete!', 'Video saved successfully');
            }
        }
    }, 500);
}

function updateDownloadCount() {
    document.getElementById('downloadCount').textContent = downloadCount;

    // Store in localStorage
    localStorage.setItem('downloadCount', downloadCount);
}

function showSuccessModal(message, path) {
    const modal = document.getElementById('successModal');
    const messageElement = document.getElementById('downloadSuccessMessage');

    messageElement.innerHTML = `
        <strong>${message}</strong><br>
        <small style="opacity: 0.8;">Saved to: ${path}</small>
    `;

    modal.classList.remove('hidden');

    // Auto-close after 5 seconds
    setTimeout(() => {
        closeModal();
    }, 5000);
}

function closeModal() {
    document.getElementById('successModal').classList.add('hidden');
}

function showStatus(message, type) {
    const statusContainer = document.getElementById('statusContainer');

    // Create status message element
    const statusElement = document.createElement('div');
    statusElement.className = `status-message ${type}`;

    // Add appropriate icon
    let icon = '';
    switch(type) {
        case 'info': icon = '<i class="fas fa-info-circle"></i>'; break;
        case 'success': icon = '<i class="fas fa-check-circle"></i>'; break;
        case 'error': icon = '<i class="fas fa-exclamation-circle"></i>'; break;
        default: icon = '<i class="fas fa-bell"></i>'; break;
    }

    statusElement.innerHTML = `${icon}<span>${message}</span>`;

    // Add to container
    statusContainer.appendChild(statusElement);

    // Show with animation
    setTimeout(() => {
        statusElement.classList.add('show');
    }, 100);

    // Auto-remove after delay
    const delay = type === 'error' ? 6000 : 4000;
    setTimeout(() => {
        statusElement.classList.remove('show');
        setTimeout(() => {
            if (statusContainer.contains(statusElement)) {
                statusContainer.removeChild(statusElement);
            }
        }, 300);
    }, delay);
}

function hideElements(elementIds) {
    elementIds.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.classList.add('hidden');
        }
    });
}

function showElements(elementIds) {
    elementIds.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.classList.remove('hidden');
        }
    });
}

function isValidYouTubeUrl(url) {
    const youtubeRegex = /^https?:\/\/(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})|youtube\.com\/playlist\?list=([a-zA-Z0-9_-]+)/;
    return youtubeRegex.test(url);
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Load download count from localStorage on startup
document.addEventListener('DOMContentLoaded', function() {
    const savedCount = localStorage.getItem('downloadCount');
    if (savedCount) {
        downloadCount = parseInt(savedCount);
        updateDownloadCount();
    }
});
function isPlaylistUrl(url) {
    return url.includes('playlist?list=') || url.includes('&list=');
}

function displayVideoInformation(videoInfos) {
    const videoInfo = videoInfos[0];

    // Check if it's age-restricted
    const isAgeRestricted = videoInfo.title.includes("Age-Restricted");

    const videoInfoElement = document.getElementById('videoInfo');
    videoInfoElement.innerHTML = `
        <div class="video-card ${isAgeRestricted ? 'age-restricted' : ''}">
            <img src="${videoInfo.thumbnail}" alt="Video thumbnail" class="video-thumbnail">
            <div class="video-details">
                <h4 class="video-title">${escapeHtml(videoInfo.title)}</h4>
                ${isAgeRestricted ?
        '<div class="age-warning">üîû <strong>This video is age-restricted.</strong> Download may work but requires YouTube authentication for full access.</div>' :
        ''
    }
                <div class="video-meta">
                    <div class="video-meta-item">
                        <i class="fas fa-clock"></i>
                        <span>${videoInfo.duration}</span>
                    </div>
                    <div class="video-meta-item">
                        <i class="fas fa-link"></i>
                        <a href="${videoInfo.url}" target="_blank">View on YouTube</a>
                    </div>
                    ${isAgeRestricted ?
        '<div class="video-meta-item"><i class="fas fa-exclamation-triangle"></i><span>May require browser cookies for download</span></div>' :
        '<div class="video-meta-item"><i class="fas fa-list"></i><span>' + videoInfo.availableQualities.length + ' quality options</span></div>'
    }
                </div>
            </div>
        </div>
    `;

    // Show quality options (even for age-restricted videos)
    displayQualityOptions(videoInfo.availableQualities);
    showElements(['videoSection', 'qualitySection']);

    if (isAgeRestricted) {
        showStatus('üîû Age-restricted video detected. Download may still work with "best" quality.', 'info');
    } else {
        showStatus('‚úÖ Video analysis complete', 'success');
    }
}
// Add playlist download option
function displayQualityOptions(qualities) {
    const qualityGrid = document.getElementById('qualityGrid');
    qualityGrid.innerHTML = '';

    // Add playlist option if it's a playlist URL
    if (isPlaylistUrl(currentUrl)) {
        const playlistOption = document.createElement('div');
        playlistOption.className = 'quality-option playlist-option';
        playlistOption.onclick = () => selectQuality('playlist-all', playlistOption);

        playlistOption.innerHTML = `
            <i class="fas fa-list"></i>
            <div class="quality-label">Full Playlist</div>
            <div class="quality-description">Download all videos</div>
        `;

        qualityGrid.appendChild(playlistOption);
    }

    // Rest of your existing quality options...
    qualities.forEach(quality => {
        // Your existing code
    });
}
// Add browser selection setup
function setupBrowserSelection() {
    const browserOptions = document.querySelectorAll('.browser-option');

    browserOptions.forEach(option => {
        option.addEventListener('click', function() {
            // Remove active class from all options
            browserOptions.forEach(opt => opt.classList.remove('active'));

            // Add active class to clicked option
            this.classList.add('active');

            // Update radio button
            this.querySelector('input[type="radio"]').checked = true;

            const browser = this.dataset.browser;
            showStatus(`üîê Selected ${browser} for authentication`, 'info');
        });
    });
}

// Update download function to include browser type
async function downloadVideo() {
    if (!selectedQuality) {
        showStatus('‚ö†Ô∏è Please select a quality first', 'error');
        return;
    }

    if (!currentUrl) {
        showStatus('‚ö†Ô∏è No video URL found', 'error');
        return;
    }

    if (downloadInProgress) {
        return;
    }

    // Get selected browser for authentication
    const selectedBrowser = document.querySelector('input[name="browserType"]:checked').value;
    let downloadPath = getSelectedPath();

    downloadInProgress = true;
    updateDownloadButton();
    showDownloadProgress(true);

    try {
        const requestBody = {
            url: currentUrl,
            quality: selectedQuality,
            downloadPath: downloadPath,
            browserType: selectedBrowser  // ‚úÖ Send browser type
        };

        showStatus(`‚¨áÔ∏è Starting download with ${selectedBrowser} authentication...`, 'info');

        const response = await fetch('/api/youtube/download', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (response.ok) {
            const result = await response.text();
            downloadCount++;
            updateDownloadCount();
            showSuccessModal(result, downloadPath);
            showStatus('‚úÖ Download completed with authentication!', 'success');
            setTimeout(() => showDownloadProgress(false), 2000);
        } else {
            const errorText = await response.text();
            if (errorText.includes('authentication') || errorText.includes('cookies')) {
                showStatus('üîê Authentication failed. Please make sure you\'re logged into YouTube in your browser.', 'error');
            } else {
                showStatus(`‚ùå Download failed: ${errorText}`, 'error');
            }
            showDownloadProgress(false);
        }
    } catch (error) {
        showStatus(`‚ùå Download error: ${error.message}`, 'error');
        showDownloadProgress(false);
    } finally {
        downloadInProgress = false;
        updateDownloadButton();
    }
}

// Update initialization
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupBrowserSelection(); // ‚úÖ Add browser selection setup
});

================================================================================

================================================================================
FILE: .idea/compiler.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="youtube-downloader" />
        <module name="youtube-video-downloader" />
      </profile>
    </annotationProcessing>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="youtube-downloader" options="-parameters" />
      <module name="youtube-video-downloader" options="-parameters" />
    </option>
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/jarRepositories.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/misc.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="ms-21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
================================================================================

[FILE NOT FOUND: .idea/modules.xml]

================================================================================
FILE: .idea/vcs.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/workspace.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="26a71d8f-7920-4ab3-81e6-8409a82ce484" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.gitattributes" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.properties" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/mvnw" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/mvnw.cmd" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/YoutubeVIdeoDownloaderApplication.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/application.properties" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/java/com/karan/youtubedownloader/YoutubeVIdeoDownloaderApplicationTests.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="mavenHomeTypeForPersistence" value="WRAPPER" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProblemsViewState">
    <option name="groupByToolId" value="true" />
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="30xpy0dCP2dQyFDK1yQL4bSZiC1" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;Spring Boot.YoutubeVIdeoDownloaderApplication.executor&quot;: &quot;Run&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="D:\Karan Ticket Project\Youtube VIdeo Downloader\src\main\java\com\karan\youtubedownloader" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="YoutubeVIdeoDownloaderApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="youtube-video-downloader" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.karan.youtubedownloader.YoutubeVIdeoDownloaderApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-bf35d07a577b-intellij.indexing.shared.core-IU-252.23892.409" />
        <option value="bundled-js-predefined-d6986cc7102b-e03c56caf84a-JavaScript-IU-252.23892.409" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="26a71d8f-7920-4ab3-81e6-8409a82ce484" name="Changes" comment="" />
      <created>1754579330173</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1754579330173</updated>
      <workItem from="1754579332302" duration="1304000" />
      <workItem from="1754580788344" duration="7915000" />
      <workItem from="1754624275612" duration="1597000" />
      <workItem from="1754638073460" duration="69000" />
      <workItem from="1754925541029" duration="162000" />
      <workItem from="1754970212742" duration="303000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/src/main/resources/static/script.js</url>
          <line>533</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>
================================================================================

[FILE NOT FOUND: youtube-video-downloader.iml]

================================================================================
PROJECT STRUCTURE
================================================================================
Youtube VIdeo Downloader/
  .gitignore
  HELP.md
  mvnw
  mvnw.cmd
  pom.xml
  project_code_extractor.py
  project_generator.py
  project_summary.txt
  youtube_downloader_complete_code.txt
  .idea/
    .gitignore
    compiler.xml
    encodings.xml
    jarRepositories.xml
    misc.xml
    vcs.xml
    workspace.xml
  .mvn/
    wrapper/
      maven-wrapper.properties
  downloads/
  src/
    main/
      java/
        com/
          karan/
            youtubedownloader/
              YoutubeVIdeoDownloaderApplication.java
              controller/
                YouTubeController.java
              model/
                DownloadHistory.java
                DownloadRequest.java
                VideoInfo.java
              repository/
                DownloadHistoryRepository.java
              service/
                YouTubeService.java
      resources/
        application.properties
        static/
          index.html
          script.js
          style.css
          u.txt
        templates/
    test/
      java/
        com/
          karan/
            youtubedownloader/
              YoutubeVIdeoDownloaderApplicationTests.java
