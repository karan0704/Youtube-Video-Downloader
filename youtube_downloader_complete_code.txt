================================================================================
YouTube Video Downloader - Complete Project Code
Generated by: Karan's Project Code Extractor
Date: 1754579327.1333907
================================================================================


================================================================================
FILE: pom.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.14</version>
        <relativePath/>
    </parent>
    <groupId>com.karan</groupId>
    <artifactId>youtube-video-downloader</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Youtube Video Downloader</name>
    <description>YouTube Video Downloader with Quality Selection</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>


        <!-- Modern MySQL Driver -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>



        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>

        <!-- Jackson for JSON processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
================================================================================

================================================================================
FILE: src/main/resources/application.properties
================================================================================
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/youtube_downloader?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root@1234
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true

# File upload settings
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

# Server settings
server.port=8080

# Logging
logging.level.com.karan.youtubedownloader=DEBUG
logging.level.org.springframework.web=DEBUG
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/YoutubeVIdeoDownloaderApplication.java
================================================================================
package com.karan.youtubedownloader;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@Slf4j
@SpringBootApplication
public class YoutubeVIdeoDownloaderApplication {

    public static void main(String[] args) {
        log.info("üöÄ Starting YouTube Video Downloader Application...");
        SpringApplication.run(YoutubeVIdeoDownloaderApplication.class, args);
        log.info("‚úÖ YouTube Video Downloader Application started successfully!");
        log.info("üåê Access the app at: http://localhost:8080");
    }
}

================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/controller/YouTubeController.java
================================================================================
package com.karan.youtubedownloader.controller;

import com.karan.youtubedownloader.model.DownloadRequest;
import com.karan.youtubedownloader.model.SubtitleDownloadRequest;
import com.karan.youtubedownloader.model.SubtitleInfo;
import com.karan.youtubedownloader.model.VideoInfo;
import com.karan.youtubedownloader.service.YouTubeService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@RequestMapping("/api/youtube")
@RequiredArgsConstructor
public class YouTubeController {

    private final YouTubeService youTubeService;

    @PostMapping("/check-quality")
    public ResponseEntity<List<VideoInfo>> checkAvailableQualities(@RequestBody String url) {
        try {
            log.info("üìä Checking available qualities for URL: {}", url);
            List<VideoInfo> videoInfos = youTubeService.getAvailableQualities(url);
            log.info("‚úÖ Found {} videos with quality options", videoInfos.size());
            return ResponseEntity.ok(videoInfos);
        } catch (Exception e) {
            log.error("‚ùå Error checking qualities: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/download")
    public ResponseEntity<String> downloadVideo(@RequestBody DownloadRequest request) {
        try {
            String downloadType = request.getDownloadType() != null ? request.getDownloadType() : "video";

            switch (downloadType.toLowerCase()) {
                case "video+subtitles":
                    return downloadVideoWithSubtitles(request);
                case "audio+subtitles":
                    return downloadAudioWithSubtitles(request);
                case "subtitles":
                    return downloadOnlySubtitles(request);
                case "audio":
                    return downloadOnlyAudio(request);
                case "video":
                default:
                    String result = youTubeService.downloadVideo(request.getUrl(), request.getQuality(), request.getDownloadPath());
                    return ResponseEntity.ok(result);
            }
        } catch (Exception e) {
            log.error("‚ùå Download failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("Download failed: " + e.getMessage());
        }
    }

    @GetMapping("/download-history")
    public ResponseEntity<List<?>> getDownloadHistory() {
        try {
            // TODO: Implement download history retrieval
            return ResponseEntity.ok(List.of());
        } catch (Exception e) {
            log.error("‚ùå Error fetching download history: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/get-subtitles")
    public ResponseEntity<List<SubtitleInfo>> getAvailableSubtitles(@RequestBody String url) {
        try {
            log.info("üé¨ Getting available subtitles for URL: {}", url);
            List<SubtitleInfo> subtitles = youTubeService.getAvailableSubtitles(url);
            return ResponseEntity.ok(subtitles);
        } catch (Exception e) {
            log.error("‚ùå Error getting subtitles: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }


    @PostMapping("/download-subtitles")
    public ResponseEntity<String> downloadSubtitles(@RequestBody SubtitleDownloadRequest request) {
        try {
            String result = youTubeService.downloadSubtitles(request);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Subtitle download failed: " + e.getMessage());
        }
    }
    // Add these new methods to your YouTubeController.java

    @PostMapping("/download-video-with-subtitles")
    public ResponseEntity<String> downloadVideoWithSubtitles(@RequestBody DownloadRequest request) {
        try {
            log.info("‚¨áÔ∏è Starting video + subtitles download for URL: {}", request.getUrl());

            String result = youTubeService.downloadVideoWithSubtitles(
                    request.getUrl(),
                    request.getQuality(),
                    request.getSubtitleLanguages(),
                    request.getDownloadPath()
            );

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Video + subtitles download failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("Download failed: " + e.getMessage());
        }
    }

    @PostMapping("/download-audio-with-subtitles")
    public ResponseEntity<String> downloadAudioWithSubtitles(@RequestBody DownloadRequest request) {
        try {
            log.info("‚¨áÔ∏è Starting audio + subtitles download for URL: {}", request.getUrl());

            String result = youTubeService.downloadAudioWithSubtitles(
                    request.getUrl(),
                    request.getAudioFormat(),
                    request.getSubtitleLanguages(),
                    request.getDownloadPath()
            );

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Audio + subtitles download failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("Download failed: " + e.getMessage());
        }
    }

    @PostMapping("/download-only-subtitles")
    public ResponseEntity<String> downloadOnlySubtitles(@RequestBody DownloadRequest request) {
        try {
            log.info("‚¨áÔ∏è Starting subtitles-only download for URL: {}", request.getUrl());

            String result = youTubeService.downloadOnlySubtitles(
                    request.getUrl(),
                    request.getSubtitleLanguages(),
                    request.getSubtitleFormats(),
                    request.getDownloadPath()
            );

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Subtitles download failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("Download failed: " + e.getMessage());
        }
    }

    @PostMapping("/download-only-audio")
    public ResponseEntity<String> downloadOnlyAudio(@RequestBody DownloadRequest request) {
        try {
            log.info("‚¨áÔ∏è Starting audio-only download for URL: {}", request.getUrl());

            String result = youTubeService.downloadOnlyAudio(
                    request.getUrl(),
                    request.getAudioFormat(),
                    request.getDownloadPath()
            );

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Audio download failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("Download failed: " + e.getMessage());
        }
    }



    @GetMapping("/detect-browser")
    public ResponseEntity<String> detectBrowser() {
        // Simple browser detection - you can enhance this
        return ResponseEntity.ok("chrome"); // Default to chrome
    }

}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/service/YouTubeService.java
================================================================================
package com.karan.youtubedownloader.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.karan.youtubedownloader.model.SubtitleDownloadRequest;
import com.karan.youtubedownloader.model.SubtitleInfo;
import com.karan.youtubedownloader.model.VideoInfo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Service
public class YouTubeService {

    private final ObjectMapper objectMapper = new ObjectMapper();

    public List<VideoInfo> getAvailableQualities(String url) throws Exception {
        log.info("üîç Fetching video information for: {}", url);

        ProcessBuilder processBuilder = new ProcessBuilder(
                "yt-dlp",
                "--dump-json",
                "--no-playlist",
                "--ignore-errors", // ‚úÖ Handle age-restricted videos gracefully
                "--no-warnings",   // ‚úÖ Reduce noise
                url
        );

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        List<VideoInfo> videoInfos = new ArrayList<>();
        StringBuilder errorOutput = new StringBuilder();
        String line;
        boolean foundAgeRestriction = false;

        // Read standard output
        while ((line = reader.readLine()) != null) {
            try {
                JsonNode videoData = objectMapper.readTree(line);
                VideoInfo videoInfo = parseVideoInfo(videoData);
                if (videoInfo != null) {
                    videoInfos.add(videoInfo);
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Could not parse video info line: {}", e.getMessage());
            }
        }

        // Read error output to detect age restrictions
        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
            errorOutput.append(line).append("\n");

            // Check for age restriction indicators
            if (line.toLowerCase().contains("age-restricted") ||
                    line.toLowerCase().contains("sign in") ||
                    line.toLowerCase().contains("inappropriate for some users")) {
                foundAgeRestriction = true;
            }
        }

        process.waitFor();

        // If no videos found but we detected age restriction, return special response
        if (videoInfos.isEmpty() && foundAgeRestriction) {
            VideoInfo restrictedVideo = VideoInfo.builder()
                    .title("üîû Age-Restricted Video - Authentication Required")
                    .url(url)
                    .duration("Unknown")
                    .thumbnail("https://via.placeholder.com/160x90?text=Age+Restricted")
                    .availableQualities(Arrays.asList("best", "720p", "480p", "360p", "worst"))
                    .build();
            videoInfos.add(restrictedVideo);
            log.warn("üîû Age-restricted video detected, providing default quality options");
        }

        return videoInfos;
    }
// Add these new methods to your YouTubeService.java

    public String downloadVideoWithSubtitles(String url, String quality, List<String> subtitleLanguages, String customPath) throws Exception {
        log.info("üì• Downloading video with subtitles in {} quality", quality);

        String downloadsPath = getDownloadsPath(customPath);
        String formatSelector = getQualityFormat(quality);

        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("-f");
        command.add(formatSelector);
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s.%(ext)s");
        command.add("--merge-output-format");
        command.add("mp4");
        command.add("--write-subs");
        command.add("--write-auto-subs");

        // Add specific subtitle languages
        if (subtitleLanguages != null && !subtitleLanguages.isEmpty()) {
            command.add("--sub-langs");
            command.add(String.join(",", subtitleLanguages));
        }

        command.add("--ignore-errors");
        command.add("--continue");
        command.add(url);

        return executeDownloadCommand(command, "üéâ Video with subtitles downloaded successfully to " + downloadsPath + "!");
    }

    public String downloadAudioWithSubtitles(String url, String format, List<String> subtitleLanguages, String customPath) throws Exception {
        log.info("üéµ Downloading audio with subtitles in {} format", format);

        String downloadsPath = getDownloadsPath(customPath);

        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("-f");
        command.add("bestaudio");
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s.%(ext)s");
        command.add("--extract-audio");
        command.add("--audio-format");
        command.add(format); // mp3, m4a, etc.
        command.add("--write-subs");
        command.add("--write-auto-subs");

        // Add specific subtitle languages
        if (subtitleLanguages != null && !subtitleLanguages.isEmpty()) {
            command.add("--sub-langs");
            command.add(String.join(",", subtitleLanguages));
        }

        command.add("--ignore-errors");
        command.add("--continue");
        command.add(url);

        return executeDownloadCommand(command, "üéâ Audio with subtitles downloaded successfully to " + downloadsPath + "!");
    }

    public String downloadOnlySubtitles(String url, List<String> subtitleLanguages, List<String> formats, String customPath) throws Exception {
        log.info("üìù Downloading only subtitles");

        String downloadsPath = getDownloadsPath(customPath);

        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("--skip-download");
        command.add("--write-subs");
        command.add("--write-auto-subs");
        command.add("--sub-format");
        command.add(String.join("/", formats)); // srt/vtt/ass
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s");

        // Add specific subtitle languages
        if (subtitleLanguages != null && !subtitleLanguages.isEmpty()) {
            command.add("--sub-langs");
            command.add(String.join(",", subtitleLanguages));
        }

        command.add("--ignore-errors");
        command.add(url);

        return executeDownloadCommand(command, "üéâ Subtitles downloaded successfully to " + downloadsPath + "!");
    }

    public String downloadOnlyAudio(String url, String format, String customPath) throws Exception {
        log.info("üéµ Downloading only audio in {} format", format);

        String downloadsPath = getDownloadsPath(customPath);

        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("-f");
        command.add("bestaudio");
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s.%(ext)s");
        command.add("--extract-audio");
        command.add("--audio-format");
        command.add(format);
        command.add("--ignore-errors");
        command.add("--continue");
        command.add(url);

        return executeDownloadCommand(command, "üéâ Audio downloaded successfully to " + downloadsPath + "!");
    }

    // Helper methods
    private String getDownloadsPath(String customPath) {
        if (customPath != null && !customPath.trim().isEmpty()) {
            return customPath.trim();
        } else {
            String userHome = System.getProperty("user.home");
            return userHome + File.separator + "Downloads" + File.separator + "YouTubeDownloader";
        }
    }

    private String executeDownloadCommand(List<String> command, String successMessage) throws Exception {
        log.info("üîß Command: {}", String.join(" ", command));

        ProcessBuilder processBuilder = new ProcessBuilder(command);
        Process process = processBuilder.start();

        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        StringBuilder output = new StringBuilder();
        StringBuilder errorOutput = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            log.info("yt-dlp: {}", line);
            output.append(line).append("\n");
        }

        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
            errorOutput.append(line).append("\n");
        }

        int exitCode = process.waitFor();

        if (exitCode == 0) {
            return successMessage;
        } else {
            String errorMessage = errorOutput.toString().trim();
            throw new RuntimeException("Download failed: " + errorMessage);
        }
    }

    public String downloadVideo(String url, String quality, String customPath) throws Exception {
        log.info("üì• Downloading video in {} quality", quality);

        // Handle download path
        String downloadsPath;
        if (customPath != null && !customPath.trim().isEmpty()) {
            downloadsPath = customPath.trim();
        } else {
            String userHome = System.getProperty("user.home");
            downloadsPath = userHome + File.separator + "Downloads" + File.separator + "YouTubeDownloader";
        }

        File downloadsDir = new File(downloadsPath);
        if (!downloadsDir.exists()) {
            downloadsDir.mkdirs();
        }

        String formatSelector = getQualityFormat(quality);

        // ‚úÖ FIXED: Proper command building
        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("-f");
        command.add(formatSelector);
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s.%(ext)s");
        command.add("--merge-output-format");
        command.add("mp4");
        command.add("--ignore-errors");
        command.add("--continue");
        // ‚úÖ REMOVED Chrome cookies that were causing the error
        command.add(url); // ‚úÖ URL must be the LAST argument

        log.info("üîß Command: {}", String.join(" ", command));

        ProcessBuilder processBuilder = new ProcessBuilder(command);
        Process process = processBuilder.start();

        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        StringBuilder output = new StringBuilder();
        StringBuilder errorOutput = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            log.info("yt-dlp: {}", line);
            output.append(line).append("\n");
        }

        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
            errorOutput.append(line).append("\n");
        }

        int exitCode = process.waitFor();

        if (exitCode == 0) {
            return String.format("üéâ Video downloaded successfully to %s!", downloadsPath);
        } else {
            String errorMessage = errorOutput.toString().trim();
            throw new RuntimeException("Download failed: " + errorMessage);
        }
    }

    private String getQualityFormat(String quality) {
        switch (quality.toLowerCase()) {
            case "1080p":
                return "best[height<=1080][ext=mp4]/best[height<=1080]";
            case "720p":
                return "best[height<=720][ext=mp4]/best[height<=720]";
            case "480p":
                return "best[height<=480][ext=mp4]/best[height<=480]";
            case "360p":
                return "best[height<=360][ext=mp4]/best[height<=360]";
            case "best":
            case "playlist-all":
                return "best[ext=mp4]/best";
            case "worst":
                return "worst[ext=mp4]/worst";
            default:
                return "best[height<=720][ext=mp4]/best[height<=720]";
        }
    }

    // ‚úÖ Removed duplicate getFormatSelector method

    private VideoInfo parseVideoInfo(JsonNode videoData) {
        try {
            String title = getJsonValue(videoData, "title", "Unknown Title");
            String duration = formatDuration(getJsonIntValue(videoData, "duration", 0));
            String thumbnail = getJsonValue(videoData, "thumbnail", "");
            String url = getJsonValue(videoData, "webpage_url", "");

            List<String> availableQualities = extractQualities(videoData);

            return VideoInfo.builder()
                    .title(title)
                    .url(url)
                    .duration(duration)
                    .thumbnail(thumbnail)
                    .availableQualities(availableQualities)
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error parsing video info: {}", e.getMessage());
            return null;
        }
    }

    private List<String> extractQualities(JsonNode videoData) {
        List<String> standardQualities = Arrays.asList("1080p", "720p", "480p", "360p", "best");
        log.info("üéØ Providing standard quality options: {}", standardQualities);
        return standardQualities;
    }

    private String getJsonValue(JsonNode node, String fieldName, String defaultValue) {
        JsonNode field = node.get(fieldName);
        if (field != null && !field.isNull()) {
            return field.asText();
        }
        return defaultValue;
    }

    private int getJsonIntValue(JsonNode node, String fieldName, int defaultValue) {
        JsonNode field = node.get(fieldName);
        if (field != null && !field.isNull()) {
            return field.asInt();
        }
        return defaultValue;
    }

    private SubtitleInfo parseSubtitleLine(String line) {
        try {
            // Parse yt-dlp subtitle output format
            // Example line: "en-US          vtt    English (United States) (auto-generated)"
            if (line.trim().isEmpty() || !line.contains("vtt") && !line.contains("srt")) {
                return null;
            }

            String[] parts = line.trim().split("\\s+", 4);
            if (parts.length < 3) {
                return null;
            }

            String languageCode = parts[0];
            String format = parts[1];
            String languageName = parts.length > 2 ? parts[2] : languageCode;
            boolean isAutoGenerated = line.toLowerCase().contains("auto-generated") ||
                    line.toLowerCase().contains("automatic");

            // Clean up language name
            if (languageName.contains("(")) {
                languageName = languageName.substring(0, languageName.indexOf("(")).trim();
            }

            return SubtitleInfo.builder()
                    .languageCode(languageCode)
                    .language(languageName)
                    .format(format)
                    .autoGenerated(isAutoGenerated)
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error parsing subtitle line: {} - {}", line, e.getMessage());
            return null;
        }
    }

    public List<SubtitleInfo> getAvailableSubtitles(String url) throws Exception {
        log.info("üé¨ Getting available subtitles for: {}", url);

        ProcessBuilder processBuilder = new ProcessBuilder(
                "yt-dlp",
                "--list-subs",
                "--no-warnings",
                "--no-playlist",
                url
        );

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        List<SubtitleInfo> subtitles = new ArrayList<>();
        String line;
        boolean foundSubtitleSection = false;

        // Read output
        while ((line = reader.readLine()) != null) {
            log.debug("yt-dlp output: {}", line);

            // Look for subtitle section
            if (line.contains("Available subtitles")) {
                foundSubtitleSection = true;
                continue;
            }

            if (foundSubtitleSection && (line.contains("vtt") || line.contains("srt"))) {
                SubtitleInfo subtitle = parseSubtitleLine(line);
                if (subtitle != null) {
                    subtitles.add(subtitle);
                }
            }
        }

        // Read errors
        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
        }

        int exitCode = process.waitFor();

        if (exitCode != 0 && subtitles.isEmpty()) {
            log.warn("‚ö†Ô∏è No subtitles found for video: {}", url);
            // Return empty list instead of throwing exception
            return new ArrayList<>();
        }

        log.info("‚úÖ Found {} subtitle languages", subtitles.size());
        return subtitles;
    }

    public String downloadSubtitles(SubtitleDownloadRequest request) throws Exception {
        // Implementation for downloading subtitles
        // Use yt-dlp with --write-subs flag
        return "Subtitles downloaded successfully";
    }

    private ProcessBuilder createDownloadProcess(String url, String quality, String downloadsPath, String browserType) {
        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("-f");
        command.add(getQualityFormat(quality));
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s.%(ext)s");
        command.add("--merge-output-format");
        command.add("mp4");
        command.add("--ignore-errors");
        command.add("--continue");

        // Add browser-specific authentication
        if (browserType != null && !browserType.isEmpty()) {
            command.add("--cookies-from-browser");
            command.add(browserType.toLowerCase()); // chrome, firefox, edge, safari
            log.info("üîê Using {} cookies for authentication", browserType);
        }

        command.add(url);

        return new ProcessBuilder(command);
    }

    private String formatDuration(int seconds) {
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;
        int secs = seconds % 60;

        if (hours > 0) {
            return String.format("%d:%02d:%02d", hours, minutes, secs);
        } else {
            return String.format("%d:%02d", minutes, secs);
        }
    }
}

================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/VideoInfo.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class VideoInfo {
    private String title;
    private String url;
    private String duration;
    private List<String> availableQualities;
    private String thumbnail;
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/DownloadRequest.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class DownloadRequest {
    private String url;
    private String quality;
    private String downloadPath;
    private String browserType;
    private String downloadType; // "video", "audio", "subtitles", "video+subtitles", "audio+subtitles"
    private String audioFormat; // "mp3", "m4a", "wav"
    private List<String> subtitleLanguages; // ["en", "es", "fr"]
    private List<String> subtitleFormats; // ["srt", "vtt", "ass"]
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/DownloadHistory.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "download_history")
public class DownloadHistory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "video_url", nullable = false)
    private String videoUrl;

    @Column(name = "video_title")
    private String videoTitle;

    @Column(name = "quality", nullable = false)
    private String quality;

    @Column(name = "file_path")
    private String filePath;

    @Column(name = "download_date", nullable = false)
    private LocalDateTime downloadDate;

    @Column(name = "file_size")
    private Long fileSize;

    @PrePersist
    public void prePersist() {
        if (downloadDate == null) {
            downloadDate = LocalDateTime.now();
        }
    }
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/repository/DownloadHistoryRepository.java
================================================================================
package com.karan.youtubedownloader.repository;

import com.karan.youtubedownloader.model.DownloadHistory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface DownloadHistoryRepository extends JpaRepository<DownloadHistory, Long> {

    List<DownloadHistory> findByVideoTitleContainingIgnoreCase(String title);

    List<DownloadHistory> findByDownloadDateBetween(LocalDateTime startDate, LocalDateTime endDate);

    List<DownloadHistory> findTop10ByOrderByDownloadDateDesc();
}
================================================================================

================================================================================
FILE: src/main/resources/static/index.html
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Downloader Pro</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Segoe+UI:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
<!-- Sticky Navigation -->
<nav class="navbar" id="navbar">
    <div class="nav-container">
        <div class="nav-brand">
            <i class="fas fa-play-circle"></i>
            <span>YT Downloader Pro</span>
        </div>
        <div class="nav-menu">
            <a href="#home" class="nav-item active">
                <i class="fas fa-home"></i>
                <span>Home</span>
            </a>
            <a href="#downloads" class="nav-item">
                <i class="fas fa-download"></i>
                <span>Downloads</span>
            </a>
            <a href="#settings" class="nav-item">
                <i class="fas fa-cog"></i>
                <span>Settings</span>
            </a>
        </div>
        <button class="menu-toggle" id="menuToggle">
            <i class="fas fa-chevron-up"></i>
        </button>
    </div>
</nav>

<div class="main-layout">
    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
        <div class="sidebar-section">
            <h3><i class="fas fa-download"></i> Quick Actions</h3>
            <button class="sidebar-btn" onclick="clearAll()">
                <i class="fas fa-trash"></i> Clear All
            </button>
            <button class="sidebar-btn" onclick="openSettings()">
                <i class="fas fa-cog"></i> Settings
            </button>
            <button class="sidebar-btn" onclick="toggleTheme()">
                <i class="fas fa-moon"></i> Dark Mode
            </button>
        </div>

        <div class="sidebar-section">
            <h3><i class="fas fa-info-circle"></i> Stats</h3>
            <div class="stat-card">
                <span class="stat-number" id="downloadCount">0</span>
                <span class="stat-label">Downloads</span>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- URL Input Section -->
        <section class="input-section">
            <div class="input-card">
                <h2><i class="fas fa-link"></i> Enter YouTube URL</h2>
                <div class="input-group">
                    <textarea id="urlInput" placeholder="Paste YouTube URL here..."></textarea>
                    <button class="btn-primary" onclick="analyzeVideo()" id="analyzeBtn">
                        <i class="fas fa-search"></i> Analyze
                    </button>
                </div>
                <div class="url-types">
                        <span class="url-type">
                            <i class="fas fa-video"></i> Single Video
                        </span>
                    <span class="url-type">
                            <i class="fas fa-list"></i> Playlist
                        </span>
                    <span class="url-type">
                            <i class="fas fa-closed-captioning"></i> Subtitles
                        </span>
                </div>
            </div>
        </section>

        <!-- Progress Section -->
        <section class="progress-section hidden" id="progressSection">
            <div class="progress-card">
                <h3><i class="fas fa-download"></i> Download Progress</h3>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div class="progress-info">
                    <span id="progressText">0%</span>
                    <span id="progressStatus">Ready</span>
                </div>
            </div>
        </section>

        <!-- Download Options -->
        <section class="options-section hidden" id="optionsSection">
            <div class="option-tabs">
                <button class="tab-btn active" data-tab="video">
                    <i class="fas fa-video"></i> Video
                </button>
                <button class="tab-btn" data-tab="audio">
                    <i class="fas fa-music"></i> Audio
                </button>
                <button class="tab-btn" data-tab="subtitles">
                    <i class="fas fa-closed-captioning"></i> Subtitles
                </button>
                <button class="tab-btn" data-tab="advanced">
                    <i class="fas fa-cogs"></i> Advanced
                </button>
            </div>

            <!-- Video Tab -->
            <div class="tab-content active" id="video-tab">
                <div class="quality-grid" id="qualityGrid"></div>
                <div class="download-actions">
                    <button class="btn-download" onclick="downloadSelected()">
                        <i class="fas fa-download"></i> Download Selected
                    </button>
                    <button class="btn-download-all" onclick="downloadAll()">
                        <i class="fas fa-download"></i> Download All
                    </button>
                </div>
            </div>

            <!-- Audio Tab -->
            <div class="tab-content" id="audio-tab">
                <div class="format-grid">
                    <div class="format-option" data-format="mp3">
                        <i class="fas fa-music"></i>
                        <h4>MP3</h4>
                        <p>320kbps Audio</p>
                    </div>
                    <div class="format-option" data-format="m4a">
                        <i class="fas fa-file-audio"></i>
                        <h4>M4A</h4>
                        <p>Best Quality</p>
                    </div>
                </div>
            </div>

            <!-- Subtitles Tab -->
            <div class="tab-content" id="subtitles-tab">
                <div class="subtitle-options" id="subtitleOptions">
                    <div class="subtitle-loading">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading available subtitles...</p>
                    </div>
                </div>
            </div>

            <!-- Advanced Tab -->
            <div class="tab-content" id="advanced-tab">
                <div class="advanced-options">
                    <div class="option-group">
                        <label for="downloadPath">Download Path:</label>
                        <div class="path-input">
                            <input type="text" id="downloadPath" placeholder="Choose download folder...">
                            <button class="btn-browse" onclick="browsePath()">
                                <i class="fas fa-folder"></i> Browse
                            </button>
                        </div>
                    </div>

                    <div class="option-group">
                        <label for="fileNaming">File Naming:</label>
                        <select id="fileNaming">
                            <option value="title">Video Title</option>
                            <option value="id">Video ID</option>
                            <option value="custom">Custom Format</option>
                        </select>
                    </div>
                </div>
            </div>
        </section>

        <!-- Video Information -->
        <section class="video-section hidden" id="videoSection">
            <div id="videoInfo"></div>
        </section>
    </main>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay hidden" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <p id="loadingText">Analyzing video...</p>
</div>

<!-- Settings Modal -->
<div class="modal-overlay hidden" id="settingsModal">
    <div class="modal">
        <div class="modal-header">
            <h3><i class="fas fa-cog"></i> Settings</h3>
            <button class="modal-close" onclick="closeSettings()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="setting-group">
                <label>Default Quality:</label>
                <select id="defaultQuality">
                    <option value="best">Best Available</option>
                    <option value="1080p">1080p</option>
                    <option value="720p">720p</option>
                    <option value="480p">480p</option>
                </select>
            </div>
            <div class="setting-group">
                <label>Browser for Login:</label>
                <select id="browserChoice">
                    <option value="chrome">Chrome</option>
                    <option value="firefox">Firefox</option>
                    <option value="edge">Edge</option>
                </select>
            </div>
        </div>
    </div>
</div>

<!-- Footer Info -->
<div class="footer-info">
    <div class="footer-content">
        <div class="browser-info">
            <i class="fab fa-chrome"></i>
            <span id="detectedBrowser">Chrome Detected</span>
        </div>
        <div class="download-path">
            <i class="fas fa-folder"></i>
            <span id="currentPath">Downloads/YTDownloader</span>
        </div>
        <div class="status-indicator">
            <div class="status-dot ready"></div>
            <span id="statusText">Ready</span>
        </div>
    </div>
</div>

<!-- Scripts
<script src="js/api.js"></script>
<script src="js/ui.js"></script>
<script src="js/events.js"></script>
<script src="js/app.js"></script>-->
<!-- Scripts -->
<script src="script.js"></script>

</body>
</html>
================================================================================

[FILE NOT FOUND: src/main/resources/static/style.css]

================================================================================
FILE: src/main/resources/static/script.js
================================================================================
// Global variables
let currentUrl = '';
let selectedQuality = '';
let downloadCount = 0;
let isMenuVisible = false;

// Wait for DOM to load
document.addEventListener('DOMContentLoaded', function () {
    console.log('‚úÖ YouTube Downloader Pro initialized!');
    setupEventListeners();
    detectBrowser();
    updateDefaultPath();
    setupScrollHandler();
    setupTabSwitching();
    loadSettings();
});

function setupEventListeners() {
    const menuToggle = document.getElementById('menuToggle');
    const urlInput = document.getElementById('urlInput');

    if (menuToggle) {
        menuToggle.addEventListener('click', toggleMenu);
    }

    if (urlInput) {
        urlInput.addEventListener('input', handleUrlInput);
    }
}

// Add these new functions to your script.js

let selectedSubtitleLanguages = [];
let selectedSubtitleFormats = ['srt'];
let downloadType = 'video'; // Default

// Enhanced download functions
function downloadVideoWithSubtitles(quality) {
    if (!currentUrl) {
        showNotification('No video URL available', 'error');
        return;
    }

    if (selectedSubtitleLanguages.length === 0) {
        showNotification('Please select at least one subtitle language', 'warning');
        return;
    }

    showNotification(`Starting video + subtitles download...`, 'info');
    showProgressSection();
    simulateProgress();

    const downloadRequest = {
        url: currentUrl,
        quality: quality,
        downloadPath: document.getElementById('downloadPath')?.value || '',
        browserType: document.getElementById('browserChoice')?.value || 'chrome',
        downloadType: 'video+subtitles',
        subtitleLanguages: selectedSubtitleLanguages
    };

    fetch('/api/youtube/download-video-with-subtitles', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(downloadRequest)
    })
        .then(handleDownloadResponse)
        .catch(handleDownloadError);
}

function downloadAudioWithSubtitles(format) {
    if (!currentUrl) {
        showNotification('No video URL available', 'error');
        return;
    }

    if (selectedSubtitleLanguages.length === 0) {
        showNotification('Please select at least one subtitle language', 'warning');
        return;
    }

    showNotification(`Starting audio + subtitles download...`, 'info');
    showProgressSection();
    simulateProgress();

    const downloadRequest = {
        url: currentUrl,
        audioFormat: format,
        downloadPath: document.getElementById('downloadPath')?.value || '',
        downloadType: 'audio+subtitles',
        subtitleLanguages: selectedSubtitleLanguages
    };

    fetch('/api/youtube/download-audio-with-subtitles', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(downloadRequest)
    })
        .then(handleDownloadResponse)
        .catch(handleDownloadError);
}

function downloadOnlySubtitles() {
    if (!currentUrl) {
        showNotification('No video URL available', 'error');
        return;
    }

    if (selectedSubtitleLanguages.length === 0) {
        showNotification('Please select at least one subtitle language', 'warning');
        return;
    }

    showNotification(`Starting subtitles download...`, 'info');
    showProgressSection();
    simulateProgress();

    const downloadRequest = {
        url: currentUrl,
        downloadPath: document.getElementById('downloadPath')?.value || '',
        downloadType: 'subtitles',
        subtitleLanguages: selectedSubtitleLanguages,
        subtitleFormats: selectedSubtitleFormats
    };

    fetch('/api/youtube/download-only-subtitles', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(downloadRequest)
    })
        .then(handleDownloadResponse)
        .catch(handleDownloadError);
}

function downloadOnlyAudio(format) {
    if (!currentUrl) {
        showNotification('No video URL available', 'error');
        return;
    }

    showNotification(`Starting audio download...`, 'info');
    showProgressSection();
    simulateProgress();

    const downloadRequest = {
        url: currentUrl,
        audioFormat: format,
        downloadPath: document.getElementById('downloadPath')?.value || '',
        downloadType: 'audio'
    };

    fetch('/api/youtube/download-only-audio', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(downloadRequest)
    })
        .then(handleDownloadResponse)
        .catch(handleDownloadError);
}

// Helper functions for handling responses
function handleDownloadResponse(response) {
    if (!response.ok) {
        return response.text().then(text => {
            throw new Error(text || 'Download failed');
        });
    }
    return response.text();
}

function handleDownloadError(error) {
    console.error('‚ùå Download failed:', error);
    showNotification('‚ùå Download failed: ' + error.message, 'error');
    hideProgressSection();
}

// Subtitle language selection
function toggleSubtitleLanguage(languageCode) {
    const index = selectedSubtitleLanguages.indexOf(languageCode);
    if (index > -1) {
        selectedSubtitleLanguages.splice(index, 1);
    } else {
        selectedSubtitleLanguages.push(languageCode);
    }

    updateSubtitleSelectionUI();
    showNotification(`Selected ${selectedSubtitleLanguages.length} subtitle languages`, 'info');
}

function updateSubtitleSelectionUI() {
    document.querySelectorAll('.subtitle-option').forEach(option => {
        const languageCode = option.dataset.language;
        if (selectedSubtitleLanguages.includes(languageCode)) {
            option.classList.add('selected');
        } else {
            option.classList.remove('selected');
        }
    });
}

// Enhanced display subtitles with selection
function displaySubtitles(subtitles) {
    const subtitleOptions = document.getElementById('subtitleOptions');
    if (!subtitleOptions) return;

    if (!subtitles || subtitles.length === 0) {
        subtitleOptions.innerHTML = `
            <div class="no-subtitles">
                <i class="fas fa-exclamation-circle"></i>
                <p>No subtitles available for this video</p>
            </div>
        `;
        return;
    }

    subtitleOptions.innerHTML = `
        <div class="subtitle-controls">
            <h4><i class="fas fa-check-square"></i> Select Subtitle Languages:</h4>
            <div class="subtitle-actions">
                <button class="btn-select-all" onclick="selectAllSubtitles()">
                    <i class="fas fa-check-double"></i> Select All
                </button>
                <button class="btn-clear-all" onclick="clearAllSubtitles()">
                    <i class="fas fa-times"></i> Clear All
                </button>
                <button class="btn-download-subs" onclick="downloadOnlySubtitles()">
                    <i class="fas fa-download"></i> Download Selected
                </button>
            </div>
        </div>
        <div class="subtitle-grid"></div>
    `;

    const subtitleGrid = subtitleOptions.querySelector('.subtitle-grid');

    subtitles.forEach(subtitle => {
        const option = document.createElement('div');
        option.className = 'subtitle-option';
        option.dataset.language = subtitle.languageCode;
        option.onclick = () => toggleSubtitleLanguage(subtitle.languageCode);

        const autoGenText = subtitle.autoGenerated ? ' (Auto-generated)' : '';

        option.innerHTML = `
            <div class="subtitle-info">
                <i class="fas fa-closed-captioning"></i>
                <div class="subtitle-details">
                    <h4>${subtitle.language}${autoGenText}</h4>
                    <p>${subtitle.languageCode} ‚Ä¢ ${subtitle.format.toUpperCase()}</p>
                </div>
                <div class="subtitle-checkbox">
                    <i class="fas fa-check"></i>
                </div>
            </div>
        `;

        subtitleGrid.appendChild(option);
    });
}

// Subtitle selection helpers
function selectAllSubtitles() {
    const subtitleOptions = document.querySelectorAll('.subtitle-option');
    selectedSubtitleLanguages = [];

    subtitleOptions.forEach(option => {
        const languageCode = option.dataset.language;
        selectedSubtitleLanguages.push(languageCode);
    });

    updateSubtitleSelectionUI();
    showNotification(`Selected all ${selectedSubtitleLanguages.length} subtitle languages`, 'success');
}

function clearAllSubtitles() {
    selectedSubtitleLanguages = [];
    updateSubtitleSelectionUI();
    showNotification('Cleared all subtitle selections', 'info');
}

// ‚úÖ This function now has proper null check
function updateDefaultPath() {
    const pathElement = document.getElementById('currentPath');
    if (pathElement) {  // ‚Üê This will now find the element!
        pathElement.textContent = 'Downloads/YTDownloader';
        console.log('‚úÖ Default path updated successfully');
    } else {
        console.warn('‚ö†Ô∏è currentPath element not found');
    }
}

function handleUrlInput(event) {
    const url = event.target.value.trim();
    if (url && !isValidYouTubeUrl(url)) {
        event.target.style.borderColor = '#ef4444';
    } else {
        event.target.style.borderColor = '';
    }
}

// ‚úÖ MAIN ANALYZE FUNCTION
function analyzeVideo() {
    console.log('üîç Analyzing video...');

    const urlInput = document.getElementById('urlInput');
    if (!urlInput) {
        showNotification('URL input not found!', 'error');
        return;
    }

    const url = urlInput.value.trim();

    if (!url) {
        showNotification('Please enter a YouTube URL', 'warning');
        return;
    }

    if (!isValidYouTubeUrl(url)) {
        showNotification('Please enter a valid YouTube URL', 'error');
        return;
    }

    currentUrl = url;
    showLoading(true, 'Analyzing video...');

    // Call your Spring Boot backend
    fetch('/api/youtube/check-quality', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(url)
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(videoInfos => {
            console.log('‚úÖ Video info received:', videoInfos);
            if (videoInfos && videoInfos.length > 0) {
                displayVideoInfo(videoInfos[0]);
                loadSubtitles(url);
                showNotification('‚úÖ Video analyzed successfully!', 'success');
            } else {
                throw new Error('No video information found');
            }
        })
        .catch(error => {
            console.error('‚ùå Analysis failed:', error);
            showNotification('‚ùå Failed to analyze: ' + error.message, 'error');
        })
        .finally(() => {
            showLoading(false);
        });
}

function displayVideoInfo(videoInfo) {
    const videoSection = document.getElementById('videoSection');
    const optionsSection = document.getElementById('optionsSection');

    if (!videoSection) return;

    // Show video card
    videoSection.innerHTML = `
        <div class="video-card fade-in">
            <img src="${videoInfo.thumbnail || 'https://via.placeholder.com/200x112?text=No+Thumbnail'}" 
                 alt="Video Thumbnail" class="video-thumbnail"
                 onerror="this.src='https://via.placeholder.com/200x112?text=No+Thumbnail'">
            <div class="video-details">
                <h3>${videoInfo.title || 'Video Title'}</h3>
                <p><i class="fas fa-clock"></i> Duration: ${videoInfo.duration || 'Unknown'}</p>
                <p><i class="fas fa-link"></i> URL: ${videoInfo.url || currentUrl}</p>
                <p><i class="fas fa-eye"></i> Available Qualities: ${videoInfo.availableQualities?.length || 0}</p>
            </div>
        </div>
    `;

    // Show quality options
    if (videoInfo.availableQualities) {
        displayQualityOptions(videoInfo.availableQualities);
    }

    // Show sections
    showSection('videoSection');
    showSection('optionsSection');

    // Scroll to video info
    videoSection.scrollIntoView({behavior: 'smooth', block: 'start'});
}

function displayQualityOptions(qualities) {
    const qualityGrid = document.getElementById('qualityGrid');
    if (!qualityGrid) return;

    qualityGrid.innerHTML = '';

    const qualityInfo = {
        '1080p': {label: 'Full HD', icon: 'fas fa-crown', desc: '1920√ó1080'},
        '720p': {label: 'HD', icon: 'fas fa-video', desc: '1280√ó720'},
        '480p': {label: 'SD', icon: 'fas fa-play', desc: '854√ó480'},
        '360p': {label: 'Low Quality', icon: 'fas fa-compress', desc: '640√ó360'},
        'best': {label: 'Best Available', icon: 'fas fa-star', desc: 'Highest Quality'},
        'worst': {label: 'Smallest Size', icon: 'fas fa-download', desc: 'Lowest Size'}
    };

    qualities.forEach(quality => {
        const info = qualityInfo[quality] || {label: 'Standard', icon: 'fas fa-video', desc: 'Quality'};

        const option = document.createElement('div');
        option.className = 'quality-option';
        option.dataset.quality = quality;

        option.innerHTML = `
            <i class="${info.icon}"></i>
            <h4>${quality}</h4>
            <p>${info.label}</p>
            <small>${info.desc}</small>
            <button class="download-btn" onclick="downloadVideo('${quality}')">
                <i class="fas fa-download"></i> Download
            </button>
        `;

        qualityGrid.appendChild(option);
    });
}

function downloadVideo(quality) {
    if (!currentUrl) {
        showNotification('No video URL available', 'error');
        return;
    }

    showNotification(`Starting ${quality} download...`, 'info');
    showProgressSection();
    simulateProgress();

    const downloadPath = document.getElementById('downloadPath')?.value || '';
    const browserChoice = document.getElementById('browserChoice')?.value || 'chrome';

    const downloadRequest = {
        url: currentUrl,
        quality: quality,
        downloadPath: downloadPath,
        browserType: browserChoice
    };

    fetch('/api/youtube/download', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(downloadRequest)
    })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || 'Download failed');
                });
            }
            return response.text();
        })
        .then(result => {
            console.log('‚úÖ Download completed:', result);
            updateProgress(100, 'Complete');
            showNotification('üéâ Download completed!', 'success');
            updateDownloadCount();

            setTimeout(() => hideProgressSection(), 2000);
        })
        .catch(error => {
            console.error('‚ùå Download failed:', error);
            showNotification('‚ùå Download failed: ' + error.message, 'error');
            hideProgressSection();
        });
}

// Progress functions
function simulateProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress >= 95) {
            clearInterval(interval);
            progress = 95;
        }
        updateProgress(Math.round(progress), 'Downloading...');
    }, 500);
}

function updateProgress(percent, status = '') {
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    const progressStatus = document.getElementById('progressStatus');

    if (progressFill) progressFill.style.width = `${percent}%`;
    if (progressText) progressText.textContent = `${percent}%`;
    if (progressStatus && status) progressStatus.textContent = status;
}

function showProgressSection() {
    const progressSection = document.getElementById('progressSection');
    if (progressSection) {
        progressSection.classList.remove('hidden');
        progressSection.scrollIntoView({behavior: 'smooth'});
    }
}

function hideProgressSection() {
    const progressSection = document.getElementById('progressSection');
    if (progressSection) {
        setTimeout(() => {
            progressSection.classList.add('hidden');
        }, 1000);
    }
}

// Utility functions
function showSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.classList.remove('hidden');
        section.classList.add('fade-in');
    }
}

function setupScrollHandler() {
    let lastScroll = 0;
    window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset;
        const navbar = document.getElementById('navbar');

        if (!navbar) return;

        if (currentScroll > 100) {
            if (currentScroll > lastScroll && isMenuVisible) {
                navbar.classList.remove('visible');
                isMenuVisible = false;
            } else if (currentScroll < lastScroll && !isMenuVisible) {
                navbar.classList.add('visible');
                isMenuVisible = true;
            }
        } else {
            navbar.classList.remove('visible');
            isMenuVisible = false;
        }
        lastScroll = currentScroll;
    });
}

function setupTabSwitching() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            tabBtns.forEach(b => b.classList.remove('active'));
            tabContents.forEach(c => c.classList.remove('active'));

            btn.classList.add('active');
            const targetTab = document.getElementById(`${btn.dataset.tab}-tab`);
            if (targetTab) {
                targetTab.classList.add('active');
            }
        });
    });
}

function toggleMenu() {
    const navbar = document.getElementById('navbar');
    const toggle = document.getElementById('menuToggle');

    if (!navbar || !toggle) return;

    if (isMenuVisible) {
        navbar.classList.remove('visible');
        toggle.innerHTML = '<i class="fas fa-chevron-down"></i>';
        isMenuVisible = false;
    } else {
        navbar.classList.add('visible');
        toggle.innerHTML = '<i class="fas fa-chevron-up"></i>';
        isMenuVisible = true;
    }
}

async function detectBrowser() {
    try {
        const response = await fetch('/api/youtube/detect-browser');
        const browser = await response.text();
        const element = document.getElementById('detectedBrowser');
        if (element) {
            element.innerHTML = `<i class="fab fa-${browser}"></i> ${browser.charAt(0).toUpperCase() + browser.slice(1)} Detected`;
        }
    } catch (error) {
        console.log('Browser detection failed');
    }
}

function loadSettings() {
    const savedCount = localStorage.getItem('downloadCount');
    if (savedCount) {
        downloadCount = parseInt(savedCount);
        const downloadCountElement = document.getElementById('downloadCount');
        if (downloadCountElement) {
            downloadCountElement.textContent = downloadCount;
        }
    }
}

async function loadSubtitles(url) {
    try {
        const response = await fetch('/api/youtube/get-subtitles', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(url)
        });

        if (response.ok) {
            const subtitles = await response.json();
            displaySubtitles(subtitles);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Could not load subtitles:', error);
    }
}

function displaySubtitles(subtitles) {
    const subtitleOptions = document.getElementById('subtitleOptions');
    if (!subtitleOptions) return;

    if (!subtitles || subtitles.length === 0) {
        subtitleOptions.innerHTML = `
            <div class="no-subtitles">
                <i class="fas fa-exclamation-circle"></i>
                <p>No subtitles available for this video</p>
            </div>
        `;
        return;
    }

    subtitleOptions.innerHTML = '';
    subtitles.forEach(subtitle => {
        const option = document.createElement('div');
        option.className = 'subtitle-option';

        const autoGenText = subtitle.autoGenerated ? ' (Auto-generated)' : '';

        option.innerHTML = `
            <div class="subtitle-info">
                <i class="fas fa-closed-captioning"></i>
                <div>
                    <h4>${subtitle.language}${autoGenText}</h4>
                    <p>${subtitle.languageCode} ‚Ä¢ ${subtitle.format.toUpperCase()}</p>
                </div>
            </div>
            <button class="btn-download-subtitle" onclick="downloadSubtitle('${subtitle.languageCode}', '${subtitle.format}')">
                <i class="fas fa-download"></i>
            </button>
        `;

        subtitleOptions.appendChild(option);
    });
}

function showLoading(show, text = 'Loading...') {
    const loading = document.getElementById('loadingOverlay');
    const loadingText = document.getElementById('loadingText');

    if (!loading) return;

    if (show) {
        loading.classList.remove('hidden');
        if (loadingText) loadingText.textContent = text;
    } else {
        loading.classList.add('hidden');
    }
}

function showNotification(message, type = 'info') {
    console.log(`${type.toUpperCase()}: ${message}`);

    const notification = document.createElement('div');
    notification.className = 'notification';

    const iconMap = {
        success: 'check-circle',
        error: 'exclamation-triangle',
        warning: 'exclamation-circle',
        info: 'info-circle'
    };

    notification.innerHTML = `
        <i class="fas fa-${iconMap[type]}"></i>
        <span>${message}</span>
    `;

    notification.style.cssText = `
        position: fixed; top: 20px; right: 20px; z-index: 10000;
        padding: 1rem 1.5rem; border-radius: 8px; color: white;
        display: flex; align-items: center; gap: 0.75rem;
        transform: translateX(100%); transition: transform 0.3s ease;
        font-weight: 500; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        min-width: 250px; max-width: 400px;
    `;

    const colors = {
        success: '#10b981',
        error: '#ef4444',
        warning: '#f59e0b',
        info: '#6366f1'
    };

    notification.style.backgroundColor = colors[type];
    document.body.appendChild(notification);

    setTimeout(() => notification.style.transform = 'translateX(0)', 100);

    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 4000);
}

function isValidYouTubeUrl(url) {
    const patterns = [
        /^https?:\/\/(www\.)?(youtube\.com|youtu\.be)/,
        /youtube\.com\/watch\?v=/,
        /youtube\.com\/playlist\?list=/,
        /youtu\.be\//
    ];
    return patterns.some(pattern => pattern.test(url));
}

function updateDownloadCount() {
    downloadCount++;
    const element = document.getElementById('downloadCount');
    if (element) {
        element.textContent = downloadCount;
    }
    localStorage.setItem('downloadCount', downloadCount);
}

// Global functions for onclick events
function clearAll() {
    const urlInput = document.getElementById('urlInput');
    if (urlInput) urlInput.value = '';

    ['videoSection', 'optionsSection', 'progressSection'].forEach(sectionId => {
        const section = document.getElementById(sectionId);
        if (section) section.classList.add('hidden');
    });

    document.querySelectorAll('.quality-option.selected, .format-option.selected')
        .forEach(opt => opt.classList.remove('selected'));

    currentUrl = '';
    selectedQuality = '';

    showNotification('Cleared all data', 'info');
}

function openSettings() {
    const modal = document.getElementById('settingsModal');
    if (modal) {
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }
}

function closeSettings() {
    const modal = document.getElementById('settingsModal');
    if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
    }
}

function downloadSelected() {
    if (selectedQuality) {
        downloadVideo(selectedQuality);
    } else {
        showNotification('Please select a quality first', 'warning');
    }
}

function downloadAll() {
    showNotification('Download All feature coming soon!', 'info');
}

function downloadSubtitle(languageCode, format) {
    showNotification(`Downloading ${languageCode} subtitles...`, 'info');
    setTimeout(() => {
        showNotification(`${languageCode} subtitles downloaded!`, 'success');
    }, 2000);
}

function browsePath() {
    const currentPath = document.getElementById('downloadPath')?.value || 'Downloads/YTDownloader';
    const newPath = prompt('Enter download path:', currentPath);

    if (newPath && newPath.trim()) {
        const pathInput = document.getElementById('downloadPath');
        const currentPathDisplay = document.getElementById('currentPath');

        if (pathInput) pathInput.value = newPath.trim();
        if (currentPathDisplay) currentPathDisplay.textContent = newPath.trim();

        localStorage.setItem('downloadPath', newPath.trim());
        showNotification('Download path updated', 'success');
    }
}

console.log('üöÄ YouTube Downloader Pro script loaded successfully!');

================================================================================

================================================================================
FILE: .idea/compiler.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="youtube-downloader" />
        <module name="youtube-video-downloader" />
      </profile>
    </annotationProcessing>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="youtube-downloader" options="-parameters" />
      <module name="youtube-video-downloader" options="-parameters" />
    </option>
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/jarRepositories.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/misc.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="ms-21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
================================================================================

[FILE NOT FOUND: .idea/modules.xml]

================================================================================
FILE: .idea/vcs.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/workspace.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="26a71d8f-7920-4ab3-81e6-8409a82ce484" name="Changes" comment="wrking">
      <change beforePath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/controller/YouTubeController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/controller/YouTubeController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/model/DownloadRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/model/DownloadRequest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/service/YouTubeService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/service/YouTubeService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/static/css/style.css" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/static/css/style.css" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/static/script.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/static/script.js" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;karan0704&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/karan0704/Youtube-Video-Downloader.git&quot;,
    &quot;accountId&quot;: &quot;54636cc6-44ce-4c2a-8924-892395f41c9f&quot;
  }
}</component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="mavenHomeTypeForPersistence" value="WRAPPER" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProblemsViewState">
    <option name="groupByToolId" value="true" />
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="30xpy0dCP2dQyFDK1yQL4bSZiC1" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;Spring Boot.YoutubeVIdeoDownloaderApplication.executor&quot;: &quot;Run&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;last_opened_file_path&quot;: &quot;D:/Karan Ticket Project/Youtube VIdeo Downloader&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="D:\Karan Ticket Project\Youtube VIdeo Downloader" />
      <recent name="D:\Karan Ticket Project\Youtube VIdeo Downloader\src\main\resources\static" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="D:\Karan Ticket Project\Youtube VIdeo Downloader\src\main\resources\static\css" />
      <recent name="D:\Karan Ticket Project\Youtube VIdeo Downloader\src\main\java\com\karan\youtubedownloader" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="YoutubeVIdeoDownloaderApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="youtube-video-downloader" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.karan.youtubedownloader.YoutubeVIdeoDownloaderApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-bf35d07a577b-intellij.indexing.shared.core-IU-252.23892.409" />
        <option value="bundled-js-predefined-d6986cc7102b-e03c56caf84a-JavaScript-IU-252.23892.409" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="26a71d8f-7920-4ab3-81e6-8409a82ce484" name="Changes" comment="" />
      <created>1754579330173</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1754579330173</updated>
      <workItem from="1754579332302" duration="1304000" />
      <workItem from="1754580788344" duration="7915000" />
      <workItem from="1754624275612" duration="1597000" />
      <workItem from="1754638073460" duration="69000" />
      <workItem from="1754925541029" duration="162000" />
      <workItem from="1754970212742" duration="3881000" />
      <workItem from="1754974209616" duration="2000000" />
      <workItem from="1754976288893" duration="4326000" />
    </task>
    <task id="LOCAL-00001" summary="2nd Commit">
      <option name="closed" value="true" />
      <created>1754975398753</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1754975398753</updated>
    </task>
    <task id="LOCAL-00002" summary="3rd Commit">
      <option name="closed" value="true" />
      <created>1754976835101</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1754976835101</updated>
    </task>
    <task id="LOCAL-00003" summary="4th Commit">
      <option name="closed" value="true" />
      <created>1754977417433</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1754977417433</updated>
    </task>
    <task id="LOCAL-00004" summary="wrking">
      <option name="closed" value="true" />
      <created>1754979893489</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1754979893489</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="CUSTOM_BOOLEAN_PROPERTIES">
                <map>
                  <entry key="Show.Git.Branches" value="true" />
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="2nd Commit" />
    <MESSAGE value="3rd Commit" />
    <MESSAGE value="4th Commit" />
    <MESSAGE value="wrking" />
    <option name="LAST_COMMIT_MESSAGE" value="wrking" />
  </component>
</project>
================================================================================

[FILE NOT FOUND: youtube-video-downloader.iml]

================================================================================
PROJECT STRUCTURE
================================================================================
Youtube VIdeo Downloader/
  .gitignore
  HELP.md
  mvnw
  mvnw.cmd
  pom.xml
  project_code_extractor.py
  project_generator.py
  project_summary.txt
  script1.py
  script2.py
  youtube_downloader_complete_code.txt
  .idea/
    .gitignore
    compiler.xml
    dataSources.local.xml
    dataSources.xml
    encodings.xml
    jarRepositories.xml
    misc.xml
    vcs.xml
    workspace.xml
    dataSources/
      cd6f2e6b-6bf4-49a0-8f21-60406dc8c510.xml
      cd6f2e6b-6bf4-49a0-8f21-60406dc8c510/
        storage_v2/
          _src_/
            schema/
              information_schema.FNRwLQ.meta
              mysql.osA4Bg.meta
              performance_schema.kIw0nw.meta
              sys.zb4BAA.meta
  .mvn/
    wrapper/
      maven-wrapper.properties
  downloads/
  src/
    main/
      java/
        com/
          karan/
            youtubedownloader/
              YoutubeVIdeoDownloaderApplication.java
              controller/
                YouTubeController.java
              model/
                DownloadHistory.java
                DownloadRequest.java
                SubtitleDownloadRequest.java
                SubtitleInfo.java
                VideoInfo.java
              repository/
                DownloadHistoryRepository.java
              service/
                YouTubeService.java
      resources/
        application.properties
        static/
          index.html
          script.js
          u.txt
          css/
            style.css
        templates/
    test/
      java/
        com/
          karan/
            youtubedownloader/
              YoutubeVIdeoDownloaderApplicationTests.java
