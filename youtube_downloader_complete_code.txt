================================================================================
YouTube Video Downloader - Complete Project Code
Generated by: Karan's Project Code Extractor
Date: 1754579327.1333907
================================================================================


================================================================================
FILE: pom.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.14</version>
        <relativePath/>
    </parent>
    <groupId>com.karan</groupId>
    <artifactId>youtube-video-downloader</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Youtube Video Downloader</name>
    <description>YouTube Video Downloader with Quality Selection</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>


        <!-- Modern MySQL Driver -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>



        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>

        <!-- Jackson for JSON processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
================================================================================

================================================================================
FILE: src/main/resources/application.properties
================================================================================
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/youtube_downloader?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root@1234
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true

# File upload settings
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

# Server settings
server.port=8080

# Logging
logging.level.com.karan.youtubedownloader=DEBUG
logging.level.org.springframework.web=DEBUG
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/YoutubeVIdeoDownloaderApplication.java
================================================================================
package com.karan.youtubedownloader;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@Slf4j
@SpringBootApplication
public class YoutubeVIdeoDownloaderApplication {

    public static void main(String[] args) {
        log.info("üöÄ Starting YouTube Video Downloader Application...");
        SpringApplication.run(YoutubeVIdeoDownloaderApplication.class, args);
        log.info("‚úÖ YouTube Video Downloader Application started successfully!");
        log.info("üåê Access the app at: http://localhost:8080");
    }
}

================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/controller/YouTubeController.java
================================================================================
package com.karan.youtubedownloader.controller;

import com.karan.youtubedownloader.model.DownloadRequest;
import com.karan.youtubedownloader.model.SubtitleDownloadRequest;
import com.karan.youtubedownloader.model.SubtitleInfo;
import com.karan.youtubedownloader.model.VideoInfo;
import com.karan.youtubedownloader.service.YouTubeService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@RequestMapping("/api/youtube")
@RequiredArgsConstructor
public class YouTubeController {

    private final YouTubeService youTubeService;

    @PostMapping("/check-quality")
    public ResponseEntity<List<VideoInfo>> checkAvailableQualities(@RequestBody String url) {
        try {
            log.info("üìä Checking available qualities for URL: {}", url);
            List<VideoInfo> videoInfos = youTubeService.getAvailableQualities(url);
            log.info("‚úÖ Found {} videos with quality options", videoInfos.size());
            return ResponseEntity.ok(videoInfos);
        } catch (Exception e) {
            log.error("‚ùå Error checking qualities: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/download")
    public ResponseEntity<String> downloadVideo(@RequestBody DownloadRequest request) {
        try {
            log.info("‚¨áÔ∏è Starting download for URL: {} in quality: {}",
                    request.getUrl(), request.getQuality());

            // Get the download path from the frontend request
            String customPath = request.getDownloadPath(); // This will come from your frontend

            // Call service with all 3 parameters
            String result = youTubeService.downloadVideo(request.getUrl(), request.getQuality(), customPath);

            log.info("‚úÖ Download completed successfully");
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Download failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body("Download failed: " + e.getMessage());
        }
    }

    @GetMapping("/download-history")
    public ResponseEntity<List<?>> getDownloadHistory() {
        try {
            // TODO: Implement download history retrieval
            return ResponseEntity.ok(List.of());
        } catch (Exception e) {
            log.error("‚ùå Error fetching download history: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/get-subtitles")
    public ResponseEntity<List<SubtitleInfo>> getAvailableSubtitles(@RequestBody String url) {
        try {
            log.info("üé¨ Getting available subtitles for URL: {}", url);
            List<SubtitleInfo> subtitles = youTubeService.getAvailableSubtitles(url);
            return ResponseEntity.ok(subtitles);
        } catch (Exception e) {
            log.error("‚ùå Error getting subtitles: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }


    @PostMapping("/download-subtitles")
    public ResponseEntity<String> downloadSubtitles(@RequestBody SubtitleDownloadRequest request) {
        try {
            String result = youTubeService.downloadSubtitles(request);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Subtitle download failed: " + e.getMessage());
        }
    }

    @GetMapping("/detect-browser")
    public ResponseEntity<String> detectBrowser() {
        // Simple browser detection - you can enhance this
        return ResponseEntity.ok("chrome"); // Default to chrome
    }

}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/service/YouTubeService.java
================================================================================
package com.karan.youtubedownloader.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.karan.youtubedownloader.model.SubtitleDownloadRequest;
import com.karan.youtubedownloader.model.SubtitleInfo;
import com.karan.youtubedownloader.model.VideoInfo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Service
public class YouTubeService {

    private final ObjectMapper objectMapper = new ObjectMapper();

    public List<VideoInfo> getAvailableQualities(String url) throws Exception {
        log.info("üîç Fetching video information for: {}", url);

        ProcessBuilder processBuilder = new ProcessBuilder(
                "yt-dlp",
                "--dump-json",
                "--no-playlist",
                "--ignore-errors", // ‚úÖ Handle age-restricted videos gracefully
                "--no-warnings",   // ‚úÖ Reduce noise
                url
        );

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        List<VideoInfo> videoInfos = new ArrayList<>();
        StringBuilder errorOutput = new StringBuilder();
        String line;
        boolean foundAgeRestriction = false;

        // Read standard output
        while ((line = reader.readLine()) != null) {
            try {
                JsonNode videoData = objectMapper.readTree(line);
                VideoInfo videoInfo = parseVideoInfo(videoData);
                if (videoInfo != null) {
                    videoInfos.add(videoInfo);
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Could not parse video info line: {}", e.getMessage());
            }
        }

        // Read error output to detect age restrictions
        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
            errorOutput.append(line).append("\n");

            // Check for age restriction indicators
            if (line.toLowerCase().contains("age-restricted") ||
                    line.toLowerCase().contains("sign in") ||
                    line.toLowerCase().contains("inappropriate for some users")) {
                foundAgeRestriction = true;
            }
        }

        process.waitFor();

        // If no videos found but we detected age restriction, return special response
        if (videoInfos.isEmpty() && foundAgeRestriction) {
            VideoInfo restrictedVideo = VideoInfo.builder()
                    .title("üîû Age-Restricted Video - Authentication Required")
                    .url(url)
                    .duration("Unknown")
                    .thumbnail("https://via.placeholder.com/160x90?text=Age+Restricted")
                    .availableQualities(Arrays.asList("best", "720p", "480p", "360p", "worst"))
                    .build();
            videoInfos.add(restrictedVideo);
            log.warn("üîû Age-restricted video detected, providing default quality options");
        }

        return videoInfos;
    }

    public String downloadVideo(String url, String quality, String customPath) throws Exception {
        log.info("üì• Downloading video in {} quality", quality);

        // Handle download path
        String downloadsPath;
        if (customPath != null && !customPath.trim().isEmpty()) {
            downloadsPath = customPath.trim();
        } else {
            String userHome = System.getProperty("user.home");
            downloadsPath = userHome + File.separator + "Downloads" + File.separator + "YouTubeDownloader";
        }

        File downloadsDir = new File(downloadsPath);
        if (!downloadsDir.exists()) {
            downloadsDir.mkdirs();
        }

        boolean isPlaylist = url.contains("playlist?list=") || url.contains("&list=");
        String formatSelector = getQualityFormat(quality);

        ProcessBuilder processBuilder;

        if (quality.equals("playlist-all") && isPlaylist) {
            log.info("üìã Downloading entire playlist with authentication");
            processBuilder = new ProcessBuilder(
                    "yt-dlp",
                    "-f", formatSelector,
                    "-o", downloadsPath + File.separator + "%(playlist_title)s" + File.separator + "%(playlist_index)s - %(title)s.%(ext)s",
                    "--merge-output-format", "mp4",
                    "--ignore-errors",
                    "--no-abort-on-error",
                    "--continue",
                    "--cookies-from-browser", "chrome", // ‚úÖ Use Chrome cookies
                    url
            );
        } else if (isPlaylist) {
            log.info("üì∫ Downloading single video from playlist with authentication");
            processBuilder = new ProcessBuilder(
                    "yt-dlp",
                    "-f", formatSelector,
                    "-o", downloadsPath + File.separator + "%(title)s.%(ext)s",
                    "--merge-output-format", "mp4",
                    "--no-playlist",
                    "--ignore-errors",
                    "--continue",
                    "--cookies-from-browser", "chrome", // ‚úÖ Use Chrome cookies
                    url
            );
        } else {
            log.info("üì∫ Downloading single video with authentication");
            processBuilder = new ProcessBuilder(
                    "yt-dlp",
                    "-f", formatSelector,
                    "-o", downloadsPath + File.separator + "%(title)s.%(ext)s",
                    "--merge-output-format", "mp4",
                    "--ignore-errors",
                    "--continue",
                    "--cookies-from-browser", "chrome", // ‚úÖ Use Chrome cookies
                    url
            );
        }

        // Rest of your existing code...
        Process process = processBuilder.start();

        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        StringBuilder output = new StringBuilder();
        StringBuilder errorOutput = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            log.info("yt-dlp: {}", line);
            output.append(line).append("\n");
        }

        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
            errorOutput.append(line).append("\n");
        }

        int exitCode = process.waitFor();

        if (exitCode == 0) {
            return String.format("üéâ Video downloaded with authentication to %s!", downloadsPath);
        } else {
            String errorMessage = errorOutput.toString().trim();
            if (errorMessage.contains("cookies") || errorMessage.contains("authentication")) {
                throw new RuntimeException("Authentication failed. Please make sure you're logged into YouTube in your browser.");
            }
            throw new RuntimeException("Download failed: " + errorMessage);
        }
    }

    private String getQualityFormat(String quality) {
        switch (quality.toLowerCase()) {
            case "1080p":
                return "best[height<=1080][ext=mp4]/best[height<=1080]";
            case "720p":
                return "best[height<=720][ext=mp4]/best[height<=720]";
            case "480p":
                return "best[height<=480][ext=mp4]/best[height<=480]";
            case "360p":
                return "best[height<=360][ext=mp4]/best[height<=360]";
            case "best":
            case "playlist-all":
                return "best[ext=mp4]/best";
            case "worst":
                return "worst[ext=mp4]/worst";
            default:
                return "best[height<=720][ext=mp4]/best[height<=720]";
        }
    }

    // ‚úÖ Removed duplicate getFormatSelector method

    private VideoInfo parseVideoInfo(JsonNode videoData) {
        try {
            String title = getJsonValue(videoData, "title", "Unknown Title");
            String duration = formatDuration(getJsonIntValue(videoData, "duration", 0));
            String thumbnail = getJsonValue(videoData, "thumbnail", "");
            String url = getJsonValue(videoData, "webpage_url", "");

            List<String> availableQualities = extractQualities(videoData);

            return VideoInfo.builder()
                    .title(title)
                    .url(url)
                    .duration(duration)
                    .thumbnail(thumbnail)
                    .availableQualities(availableQualities)
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error parsing video info: {}", e.getMessage());
            return null;
        }
    }

    private List<String> extractQualities(JsonNode videoData) {
        List<String> standardQualities = Arrays.asList("1080p", "720p", "480p", "360p", "best");
        log.info("üéØ Providing standard quality options: {}", standardQualities);
        return standardQualities;
    }

    private String getJsonValue(JsonNode node, String fieldName, String defaultValue) {
        JsonNode field = node.get(fieldName);
        if (field != null && !field.isNull()) {
            return field.asText();
        }
        return defaultValue;
    }

    private int getJsonIntValue(JsonNode node, String fieldName, int defaultValue) {
        JsonNode field = node.get(fieldName);
        if (field != null && !field.isNull()) {
            return field.asInt();
        }
        return defaultValue;
    }

    private SubtitleInfo parseSubtitleLine(String line) {
        try {
            // Parse yt-dlp subtitle output format
            // Example line: "en-US          vtt    English (United States) (auto-generated)"
            if (line.trim().isEmpty() || !line.contains("vtt") && !line.contains("srt")) {
                return null;
            }

            String[] parts = line.trim().split("\\s+", 4);
            if (parts.length < 3) {
                return null;
            }

            String languageCode = parts[0];
            String format = parts[1];
            String languageName = parts.length > 2 ? parts[2] : languageCode;
            boolean isAutoGenerated = line.toLowerCase().contains("auto-generated") ||
                    line.toLowerCase().contains("automatic");

            // Clean up language name
            if (languageName.contains("(")) {
                languageName = languageName.substring(0, languageName.indexOf("(")).trim();
            }

            return SubtitleInfo.builder()
                    .languageCode(languageCode)
                    .language(languageName)
                    .format(format)
                    .autoGenerated(isAutoGenerated)
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error parsing subtitle line: {} - {}", line, e.getMessage());
            return null;
        }
    }

    public List<SubtitleInfo> getAvailableSubtitles(String url) throws Exception {
        log.info("üé¨ Getting available subtitles for: {}", url);

        ProcessBuilder processBuilder = new ProcessBuilder(
                "yt-dlp",
                "--list-subs",
                "--no-warnings",
                "--no-playlist",
                url
        );

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        List<SubtitleInfo> subtitles = new ArrayList<>();
        String line;
        boolean foundSubtitleSection = false;

        // Read output
        while ((line = reader.readLine()) != null) {
            log.debug("yt-dlp output: {}", line);

            // Look for subtitle section
            if (line.contains("Available subtitles")) {
                foundSubtitleSection = true;
                continue;
            }

            if (foundSubtitleSection && (line.contains("vtt") || line.contains("srt"))) {
                SubtitleInfo subtitle = parseSubtitleLine(line);
                if (subtitle != null) {
                    subtitles.add(subtitle);
                }
            }
        }

        // Read errors
        while ((line = errorReader.readLine()) != null) {
            log.warn("yt-dlp error: {}", line);
        }

        int exitCode = process.waitFor();

        if (exitCode != 0 && subtitles.isEmpty()) {
            log.warn("‚ö†Ô∏è No subtitles found for video: {}", url);
            // Return empty list instead of throwing exception
            return new ArrayList<>();
        }

        log.info("‚úÖ Found {} subtitle languages", subtitles.size());
        return subtitles;
    }

    public String downloadSubtitles(SubtitleDownloadRequest request) throws Exception {
        // Implementation for downloading subtitles
        // Use yt-dlp with --write-subs flag
        return "Subtitles downloaded successfully";
    }

    private ProcessBuilder createDownloadProcess(String url, String quality, String downloadsPath, String browserType) {
        List<String> command = new ArrayList<>();
        command.add("yt-dlp");
        command.add("-f");
        command.add(getQualityFormat(quality));
        command.add("-o");
        command.add(downloadsPath + File.separator + "%(title)s.%(ext)s");
        command.add("--merge-output-format");
        command.add("mp4");
        command.add("--ignore-errors");
        command.add("--continue");

        // Add browser-specific authentication
        if (browserType != null && !browserType.isEmpty()) {
            command.add("--cookies-from-browser");
            command.add(browserType.toLowerCase()); // chrome, firefox, edge, safari
            log.info("üîê Using {} cookies for authentication", browserType);
        }

        command.add(url);

        return new ProcessBuilder(command);
    }

    private String formatDuration(int seconds) {
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;
        int secs = seconds % 60;

        if (hours > 0) {
            return String.format("%d:%02d:%02d", hours, minutes, secs);
        } else {
            return String.format("%d:%02d", minutes, secs);
        }
    }
}

================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/VideoInfo.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class VideoInfo {
    private String title;
    private String url;
    private String duration;
    private List<String> availableQualities;
    private String thumbnail;
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/DownloadRequest.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class DownloadRequest {
    private String url;
    private String quality;
    private String downloadPath;
    private String browserType;
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/model/DownloadHistory.java
================================================================================
package com.karan.youtubedownloader.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "download_history")
public class DownloadHistory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "video_url", nullable = false)
    private String videoUrl;

    @Column(name = "video_title")
    private String videoTitle;

    @Column(name = "quality", nullable = false)
    private String quality;

    @Column(name = "file_path")
    private String filePath;

    @Column(name = "download_date", nullable = false)
    private LocalDateTime downloadDate;

    @Column(name = "file_size")
    private Long fileSize;

    @PrePersist
    public void prePersist() {
        if (downloadDate == null) {
            downloadDate = LocalDateTime.now();
        }
    }
}
================================================================================

================================================================================
FILE: src/main/java/com/karan/youtubedownloader/repository/DownloadHistoryRepository.java
================================================================================
package com.karan.youtubedownloader.repository;

import com.karan.youtubedownloader.model.DownloadHistory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface DownloadHistoryRepository extends JpaRepository<DownloadHistory, Long> {

    List<DownloadHistory> findByVideoTitleContainingIgnoreCase(String title);

    List<DownloadHistory> findByDownloadDateBetween(LocalDateTime startDate, LocalDateTime endDate);

    List<DownloadHistory> findTop10ByOrderByDownloadDateDesc();
}
================================================================================

================================================================================
FILE: src/main/resources/static/index.html
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Downloader Pro</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Segoe+UI:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
<!-- Sticky Navigation -->
<nav class="navbar" id="navbar">
    <div class="nav-container">
        <div class="nav-brand">
            <i class="fas fa-play-circle"></i>
            <span>YT Downloader Pro</span>
        </div>
        <div class="nav-menu">
            <a href="#home" class="nav-item active">
                <i class="fas fa-home"></i>
                <span>Home</span>
            </a>
            <a href="#playlists" class="nav-item">
                <i class="fas fa-list-ul"></i>
                <span>Playlists</span>
            </a>
            <a href="#settings" class="nav-item">
                <i class="fas fa-cog"></i>
                <span>Settings</span>
            </a>
        </div>
        <!-- Menu Toggle Button -->
        <button class="menu-toggle" id="menuToggle">
            <i class="fas fa-chevron-up"></i>
        </button>
    </div>
</nav>

<div class="main-layout">
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-section">
            <h3><i class="fas fa-download"></i> Quick Actions</h3>
            <button class="sidebar-btn" onclick="clearAll()">
                <i class="fas fa-trash"></i> Clear All
            </button>
            <button class="sidebar-btn" onclick="openSettings()">
                <i class="fas fa-cog"></i> Settings
            </button>
        </div>

        <div class="sidebar-section">
            <h3><i class="fas fa-info-circle"></i> Stats</h3>
            <div class="stat-card">
                <span class="stat-number" id="downloadCount">0</span>
                <span class="stat-label">Downloads</span>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- URL Input Section -->
        <section class="input-section">
            <div class="input-card">
                <h2><i class="fas fa-link"></i> Enter YouTube URL</h2>
                <div class="input-group">
                    <textarea id="urlInput" placeholder="Paste YouTube URL here..."></textarea>
                    <button class="btn-primary" onclick="analyzeVideo()">
                        <i class="fas fa-search"></i> Analyze
                    </button>
                </div>
                <div class="url-types">
                        <span class="url-type">
                            <i class="fas fa-video"></i> Single Video
                        </span>
                    <span class="url-type">
                            <i class="fas fa-list"></i> Playlist
                        </span>
                    <span class="url-type">
                            <i class="fas fa-closed-captioning"></i> Subtitles
                        </span>
                </div>
            </div>
        </section>

        <!-- Download Options -->
        <section class="options-section hidden" id="optionsSection" style="display: none;">
            <div class="option-tabs">
                <button class="tab-btn active" data-tab="video">
                    <i class="fas fa-video"></i> Video
                </button>
                <button class="tab-btn" data-tab="audio">
                    <i class="fas fa-music"></i> Audio
                </button>
                <button class="tab-btn" data-tab="subtitles">
                    <i class="fas fa-closed-captioning"></i> Subtitles
                </button>
            </div>

            <!-- Video Tab -->
            <div class="tab-content active" id="video-tab">
                <div class="quality-grid" id="qualityGrid">
                    <!-- Quality options will be inserted here -->
                </div>
            </div>

            <!-- Audio Tab -->
            <div class="tab-content" id="audio-tab">
                <div class="audio-formats">
                    <div class="format-option" data-format="mp3">
                        <i class="fas fa-music"></i>
                        <span>MP3 (320kbps)</span>
                    </div>
                    <div class="format-option" data-format="m4a">
                        <i class="fas fa-file-audio"></i>
                        <span>M4A (Best)</span>
                    </div>
                </div>
            </div>

            <!-- Subtitles Tab -->
            <div class="tab-content" id="subtitles-tab">
                <div class="subtitle-options" id="subtitleOptions">
                    <!-- Subtitle options will be inserted here -->
                </div>
            </div>
        </section>

        <!-- Video Information -->
        <section class="video-section" id="videoSection hidden" style="display: none;">
            <div id="videoInfo"></div>
        </section>

        <!-- Loading -->
        <div class="loading-overlay hidden" id="loadingOverlay">
            <div class="loading-spinner"></div>
            <p>Analyzing video...</p>
        </div>
    </main>
</div>

<!-- Fixed Footer Info -->
<div class="footer-info">
    <div class="footer-content">
        <div class="browser-info">
            <i class="fab fa-chrome"></i>
            <span id="detectedBrowser">Chrome Detected</span>
        </div>
        <div class="download-path">
            <i class="fas fa-folder"></i>
            <span id="currentPath">Downloads/YTDownloader</span>
        </div>
        <div class="status-indicator">
            <div class="status-dot ready"></div>
            <span>Ready</span>
        </div>
    </div>
</div>

<script src="script.js"></script>
</body>
</html>
================================================================================

================================================================================
FILE: src/main/resources/static/style.css
================================================================================
:root {
    --primary-color: #6366f1;
    --primary-light: #a5b4fc;
    --secondary-color: #f1f5f9;
    --accent-color: #10b981;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --bg-color: #f8fafc;
    --card-bg: #ffffff;
    --border-color: #e2e8f0;
    --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
    --border-radius: 12px;
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', system-ui, sans-serif;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    color: var(--text-primary);
    line-height: 1.6;
    overflow-x: hidden;
}

/* Navigation */
.navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--border-color);
    z-index: 1000;
    transform: translateY(-100%);
    transition: var(--transition);
}

.navbar.visible {
    transform: translateY(0);
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0.75rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav-brand {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: var(--primary-color);
}

.nav-menu {
    display: flex;
    gap: 2rem;
}

.nav-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    text-decoration: none;
    color: var(--text-secondary);
    border-radius: 8px;
    transition: var(--transition);
    font-size: 0.9rem;
}

.nav-item:hover,
.nav-item.active {
    color: var(--primary-color);
    background: var(--secondary-color);
}

.menu-toggle {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    color: var(--text-secondary);
}

/* Main Layout */
.main-layout {
    display: flex;
    padding-top: 2rem;
    min-height: 100vh;
}

.sidebar {
    width: 280px;
    padding: 2rem 1rem;
    background: var(--card-bg);
    border-right: 1px solid var(--border-color);
    position: sticky;
    top: 2rem;
    height: fit-content;
}

.sidebar-section {
    margin-bottom: 2rem;
}

.sidebar-section h3 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--text-secondary);
    margin-bottom: 1rem;
}

.sidebar-btn {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: none;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    cursor: pointer;
    margin-bottom: 0.5rem;
    transition: var(--transition);
    font-size: 0.9rem;
}

.sidebar-btn:hover {
    background: var(--secondary-color);
    border-color: var(--primary-color);
}

.stat-card {
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    color: white;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    text-align: center;
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
}

.stat-label {
    font-size: 0.9rem;
    opacity: 0.9;
}

/* Main Content */
.main-content {
    flex: 1;
    padding: 2rem;
    max-width: calc(100vw - 280px);
}

/* Input Section */
.input-section {
    margin-bottom: 2rem;
}

.input-card {
    background: var(--card-bg);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.input-card h2 {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
    color: var(--text-primary);
}

.input-group {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
}

#urlInput {
    flex: 1;
    min-height: 80px;
    padding: 1rem;
    border: 2px solid var(--border-color);
    border-radius: 10px;
    font-family: inherit;
    font-size: 0.95rem;
    resize: vertical;
    transition: var(--transition);
}

#urlInput:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

.btn-primary {
    padding: 1rem 2rem;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    color: white;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    transition: var(--transition);
    white-space: nowrap;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.url-types {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
}

.url-type {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--secondary-color);
    border-radius: 20px;
    font-size: 0.85rem;
    color: var(--text-secondary);
}

/* Tabs */
.option-tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 2rem;
}

.tab-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: var(--secondary-color);
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: var(--transition);
    font-weight: 500;
}

.tab-btn.active {
    background: var(--primary-color);
    color: white;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

/* Quality Grid */
.quality-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
}

.quality-option {
    padding: 1.5rem;
    background: var(--card-bg);
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
    text-align: center;
    cursor: pointer;
    transition: var(--transition);
    position: relative;
    overflow: hidden;
}

.quality-option::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: left 0.5s;
}

.quality-option:hover::before {
    left: 100%;
}

.quality-option:hover {
    border-color: var(--primary-color);
    transform: translateY(-3px);
    box-shadow: var(--shadow-lg);
}

.quality-option.selected {
    border-color: var(--primary-color);
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    color: white;
}

/* Footer Info */
.footer-info {
    position: fixed;
    bottom: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border: 1px solid var(--border-color);
    border-radius: 12px 0 0 0;
    padding: 1rem 1.5rem;
    min-width: 300px;
    z-index: 100;
}

.footer-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    font-size: 0.85rem;
}

.footer-content > div {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
}

.status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--accent-color);
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

/* Loading */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(248, 250, 252, 0.9);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    backdrop-filter: blur(5px);
}

.loading-spinner {
    width: 50px;
    height: 50px;
    border: 4px solid var(--border-color);
    border-top: 4px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.hidden {
    display: none !important;
}

/* Responsive Design */
@media (max-width: 768px) {
    .main-layout {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        position: relative;
        top: 0;
    }

    .main-content {
        max-width: 100%;
        padding: 1rem;
    }

    .input-group {
        flex-direction: column;
    }

    .footer-info {
        position: relative;
        width: 100%;
        border-radius: 0;
    }
}
/* Notification Styles */
.notification {
    max-width: 400px;
    min-width: 250px;
}

.notification.show {
    transform: translateX(0) !important;
}

/* Video Card Styles */
.video-card {
    display: flex;
    gap: 1rem;
    padding: 1.5rem;
    background: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    margin-bottom: 1rem;
}

.video-thumbnail {
    width: 160px;
    height: 90px;
    border-radius: 8px;
    object-fit: cover;
}

.video-details h3 {
    margin-bottom: 0.5rem;
    color: var(--text-primary);
}

.video-details p {
    color: var(--text-secondary);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Hidden class */
.hidden {
    display: none !important;
}

================================================================================

================================================================================
FILE: src/main/resources/static/script.js
================================================================================
// Wait for the page to fully load before running any code
document.addEventListener('DOMContentLoaded', function() {
    console.log('Page loaded successfully!');
    initializeApp();
});

// Global variables
let currentUrl = '';
let selectedQuality = '';
let selectedFormat = 'video';
let downloadCount = 0;
let isMenuVisible = false;

function initializeApp() {
    console.log('Initializing app...');
    setupEventListeners();
    detectBrowser();
    loadDownloadCount();
    setupScrollHandler();
    setupTabSwitching();
}

function setupEventListeners() {
    // Menu toggle
    const menuToggle = document.getElementById('menuToggle');
    if (menuToggle) {
        menuToggle.addEventListener('click', toggleMenu);
    } else {
        console.log('Menu toggle button not found');
    }

    // URL input
    const urlInput = document.getElementById('urlInput');
    if (urlInput) {
        urlInput.addEventListener('input', handleUrlInput);
    } else {
        console.log('URL input not found');
    }
}

// This is the function your button calls - MAKE SURE IT'S HERE
function analyzeVideo() {
    console.log('Analyze button clicked!');

    const urlInput = document.getElementById('urlInput');
    if (!urlInput) {
        alert('URL input field not found!');
        return;
    }

    const url = urlInput.value.trim();

    if (!url) {
        alert('Please enter a YouTube URL');
        return;
    }

    if (!isValidYouTubeUrl(url)) {
        alert('Please enter a valid YouTube URL');
        return;
    }

    currentUrl = url;
    console.log('Analyzing URL:', url);

    // Show loading
    showLoading(true);

    // Make API call to your backend
    fetch('/api/youtube/check-quality', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(url)
    })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Failed to analyze video');
            }
        })
        .then(videoInfos => {
            console.log('Video info received:', videoInfos);
            displayVideoInfo(videoInfos[0]);
            showNotification('Video analyzed successfully!', 'success');
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Failed to analyze video: ' + error.message, 'error');
        })
        .finally(() => {
            showLoading(false);
        });
}

function handleUrlInput(event) {
    const url = event.target.value.trim();
    if (url && !isValidYouTubeUrl(url)) {
        event.target.style.borderColor = '#ef4444';
    } else {
        event.target.style.borderColor = '';
    }
}

function setupScrollHandler() {
    let lastScroll = 0;

    window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset;
        const navbar = document.getElementById('navbar');

        if (!navbar) return;

        if (currentScroll > 100) {
            if (currentScroll > lastScroll && isMenuVisible) {
                navbar.classList.remove('visible');
                isMenuVisible = false;
            } else if (currentScroll < lastScroll && !isMenuVisible) {
                navbar.classList.add('visible');
                isMenuVisible = true;
            }
        } else {
            navbar.classList.remove('visible');
            isMenuVisible = false;
        }

        lastScroll = currentScroll;
    });
}

function toggleMenu() {
    const navbar = document.getElementById('navbar');
    const toggle = document.getElementById('menuToggle');

    if (!navbar || !toggle) return;

    if (isMenuVisible) {
        navbar.classList.remove('visible');
        toggle.innerHTML = '<i class="fas fa-chevron-down"></i>';
        isMenuVisible = false;
    } else {
        navbar.classList.add('visible');
        toggle.innerHTML = '<i class="fas fa-chevron-up"></i>';
        isMenuVisible = true;
    }
}

function setupTabSwitching() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            tabBtns.forEach(b => b.classList.remove('active'));
            tabContents.forEach(c => c.classList.remove('active'));

            btn.classList.add('active');
            const targetTab = document.getElementById(`${btn.dataset.tab}-tab`);
            if (targetTab) {
                targetTab.classList.add('active');
            }

            selectedFormat = btn.dataset.tab;
        });
    });
}

function displayVideoInfo(videoInfo) {
    const videoSection = document.getElementById('videoSection');
    if (!videoSection) {
        console.log('Video section not found');
        return;
    }

    videoSection.innerHTML = `
        <div class="video-card">
            <img src="${videoInfo.thumbnail || ''}" alt="Thumbnail" class="video-thumbnail">
            <div class="video-details">
                <h3>${videoInfo.title || 'Video Title'}</h3>
                <p><i class="fas fa-clock"></i> ${videoInfo.duration || 'Unknown'}</p>
            </div>
        </div>
    `;

    if (videoInfo.availableQualities) {
        displayQualityOptions(videoInfo.availableQualities);
    }

    videoSection.classList.remove('hidden');

    const optionsSection = document.getElementById('optionsSection');
    if (optionsSection) {
        optionsSection.classList.remove('hidden');
    }
}

function displayQualityOptions(qualities) {
    const qualityGrid = document.getElementById('qualityGrid');
    if (!qualityGrid) return;

    qualityGrid.innerHTML = '';

    const qualityLabels = {
        '1080p': 'Full HD',
        '720p': 'HD',
        '480p': 'SD',
        '360p': 'Low',
        'best': 'Best Quality',
        'worst': 'Smallest Size'
    };

    qualities.forEach(quality => {
        const option = document.createElement('div');
        option.className = 'quality-option';
        option.onclick = () => selectQuality(quality, option);

        option.innerHTML = `
            <i class="fas fa-video"></i>
            <h4>${quality}</h4>
            <p>${qualityLabels[quality] || 'Standard'}</p>
        `;

        qualityGrid.appendChild(option);
    });
}

function selectQuality(quality, element) {
    document.querySelectorAll('.quality-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    element.classList.add('selected');
    selectedQuality = quality;

    showNotification(`Selected quality: ${quality}`, 'info');
}

async function detectBrowser() {
    try {
        const response = await fetch('/api/youtube/detect-browser');
        const browser = await response.text();
        const detectedBrowser = document.getElementById('detectedBrowser');
        if (detectedBrowser) {
            detectedBrowser.innerHTML = `
                <i class="fab fa-${browser}"></i> ${browser.charAt(0).toUpperCase() + browser.slice(1)} Detected
            `;
        }
    } catch (error) {
        console.log('Browser detection failed:', error);
    }
}

function showLoading(show) {
    const loading = document.getElementById('loadingOverlay');
    if (!loading) {
        console.log('Loading overlay not found');
        return;
    }

    if (show) {
        loading.classList.remove('hidden');
    } else {
        loading.classList.add('hidden');
    }
}

function showNotification(message, type = 'info') {
    console.log(`${type.toUpperCase()}: ${message}`);

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation' : 'info'}-circle"></i>
        ${message}
    `;

    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        color: white;
        z-index: 10000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    `;

    if (type === 'success') notification.style.backgroundColor = '#10b981';
    else if (type === 'error') notification.style.backgroundColor = '#ef4444';
    else notification.style.backgroundColor = '#6366f1';

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);

    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

function isValidYouTubeUrl(url) {
    return /^https?:\/\/(www\.)?(youtube\.com|youtu\.be)/.test(url);
}

function loadDownloadCount() {
    const saved = localStorage.getItem('downloadCount');
    if (saved) {
        downloadCount = parseInt(saved);
        const downloadCountElement = document.getElementById('downloadCount');
        if (downloadCountElement) {
            downloadCountElement.textContent = downloadCount;
        }
    }
}

function clearAll() {
    const urlInput = document.getElementById('urlInput');
    const videoSection = document.getElementById('videoSection');
    const optionsSection = document.getElementById('optionsSection');

    if (urlInput) urlInput.value = '';
    if (videoSection) videoSection.classList.add('hidden');
    if (optionsSection) optionsSection.classList.add('hidden');

    showNotification('Cleared all data', 'info');
}

function openSettings() {
    showNotification('Settings panel coming soon!', 'info');
}

// Make functions available globally for onclick events
window.analyzeVideo = analyzeVideo;
window.clearAll = clearAll;
window.openSettings = openSettings;

================================================================================

================================================================================
FILE: .idea/compiler.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="youtube-downloader" />
        <module name="youtube-video-downloader" />
      </profile>
    </annotationProcessing>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="youtube-downloader" options="-parameters" />
      <module name="youtube-video-downloader" options="-parameters" />
    </option>
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/jarRepositories.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/misc.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="ms-21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
================================================================================

[FILE NOT FOUND: .idea/modules.xml]

================================================================================
FILE: .idea/vcs.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
================================================================================

================================================================================
FILE: .idea/workspace.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="26a71d8f-7920-4ab3-81e6-8409a82ce484" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/service/YouTubeService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/karan/youtubedownloader/service/YouTubeService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/static/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/static/index.html" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/static/script.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/static/script.js" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/static/style.css" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/static/style.css" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/youtube_downloader_complete_code.txt" beforeDir="false" afterPath="$PROJECT_DIR$/youtube_downloader_complete_code.txt" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
  "lastFilter": {
    "state": "OPEN",
    "assignee": "karan0704"
  }
}]]></component>
  <component name="GithubPullRequestsUISettings"><![CDATA[{
  "selectedUrlAndAccountId": {
    "url": "https://github.com/karan0704/Youtube-Video-Downloader.git",
    "accountId": "54636cc6-44ce-4c2a-8924-892395f41c9f"
  }
}]]></component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="mavenHomeTypeForPersistence" value="WRAPPER" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProblemsViewState">
    <option name="groupByToolId" value="true" />
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="30xpy0dCP2dQyFDK1yQL4bSZiC1" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "RequestMappingsPanelOrder0": "0",
    "RequestMappingsPanelOrder1": "1",
    "RequestMappingsPanelWidth0": "75",
    "RequestMappingsPanelWidth1": "75",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252": "true",
    "RunOnceActivity.git.unshallow": "true",
    "Spring Boot.YoutubeVIdeoDownloaderApplication.executor": "Run",
    "git-widget-placeholder": "main",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="D:\Karan Ticket Project\Youtube VIdeo Downloader\src\main\java\com\karan\youtubedownloader" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="YoutubeVIdeoDownloaderApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="youtube-video-downloader" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.karan.youtubedownloader.YoutubeVIdeoDownloaderApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-bf35d07a577b-intellij.indexing.shared.core-IU-252.23892.409" />
        <option value="bundled-js-predefined-d6986cc7102b-e03c56caf84a-JavaScript-IU-252.23892.409" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="26a71d8f-7920-4ab3-81e6-8409a82ce484" name="Changes" comment="" />
      <created>1754579330173</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1754579330173</updated>
      <workItem from="1754579332302" duration="1304000" />
      <workItem from="1754580788344" duration="7915000" />
      <workItem from="1754624275612" duration="1597000" />
      <workItem from="1754638073460" duration="69000" />
      <workItem from="1754925541029" duration="162000" />
      <workItem from="1754970212742" duration="3191000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/src/main/resources/static/script.js</url>
          <line>10</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>
================================================================================

[FILE NOT FOUND: youtube-video-downloader.iml]

================================================================================
PROJECT STRUCTURE
================================================================================
Youtube VIdeo Downloader/
  .gitignore
  HELP.md
  mvnw
  mvnw.cmd
  pom.xml
  project_code_extractor.py
  project_generator.py
  project_summary.txt
  youtube_downloader_complete_code.txt
  .idea/
    .gitignore
    compiler.xml
    encodings.xml
    jarRepositories.xml
    misc.xml
    vcs.xml
    workspace.xml
  .mvn/
    wrapper/
      maven-wrapper.properties
  downloads/
  src/
    main/
      java/
        com/
          karan/
            youtubedownloader/
              YoutubeVIdeoDownloaderApplication.java
              controller/
                YouTubeController.java
              model/
                DownloadHistory.java
                DownloadRequest.java
                SubtitleDownloadRequest.java
                SubtitleInfo.java
                VideoInfo.java
              repository/
                DownloadHistoryRepository.java
              service/
                YouTubeService.java
      resources/
        application.properties
        static/
          index.html
          script.js
          style.css
          u.txt
        templates/
    test/
      java/
        com/
          karan/
            youtubedownloader/
              YoutubeVIdeoDownloaderApplicationTests.java
